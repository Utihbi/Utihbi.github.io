<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>菜鸟生活</title>
  <subtitle>菜鸟也有梦想！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://utihbi.github.io/"/>
  <updated>2016-07-23T10:04:02.944Z</updated>
  <id>https://utihbi.github.io/</id>
  
  <author>
    <name>Emerson</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>细说UML核心模型</title>
    <link href="https://utihbi.github.io/2016/07/23/%E7%BB%86%E8%AF%B4UML%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9E%8B/"/>
    <id>https://utihbi.github.io/2016/07/23/细说UML核心模型/</id>
    <published>2016-07-23T09:51:06.000Z</published>
    <updated>2016-07-23T10:04:02.944Z</updated>
    
    <content type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;模型就是一堆有意义的静态图和动态图组合在一起，表达了一个有意义的中心思想。&lt;/p&gt;
&lt;p&gt;简言之，一个模型提出了论点，静态图是论据，动态图是论证。建模就是采用论据来论证论点的过程。&lt;/p&gt;
&lt;h2 id=&quot;用例模型&quot;&gt;&lt;a href=&quot;#用例模型&quot; class=&quot;headerlink&quot; title=&quot;用例模型&quot;&gt;&lt;/a&gt;用例模型&lt;/h2&gt;&lt;h3 id=&quot;业务用例模型&quot;&gt;&lt;a href=&quot;#业务用例模型&quot; class=&quot;headerlink&quot; title=&quot;业务用例模型&quot;&gt;&lt;/a&gt;业务用例模型&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;用于识别和规定业务需求，描述的是业务范围
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;什么时候使用业务用例模型？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;软件规模较大&lt;/li&gt;
&lt;li&gt;问题领域有复杂的组织结构&lt;/li&gt;
&lt;li&gt;业务流程繁杂&lt;/li&gt;
&lt;li&gt;开发人员对于这个行业知之甚少&lt;/li&gt;
&lt;li&gt;希望做行业标准&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;概念用例模型&quot;&gt;&lt;a href=&quot;#概念用例模型&quot; class=&quot;headerlink&quot; title=&quot;概念用例模型&quot;&gt;&lt;/a&gt;概念用例模型&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;用来分析和确认业务需求，抽象出的概念用例通过包含、泛化、扩展关系连接到基本业务用例
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;什么时候使用概念用例模型？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;业务用例粒度较大，不易过渡到粒度较小的系统用例&lt;/li&gt;
&lt;li&gt;业务场景过于复杂，步骤和分支过多&lt;/li&gt;
&lt;li&gt;有7+个泳道存在&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;系统-用例模型&quot;&gt;&lt;a href=&quot;#系统-用例模型&quot; class=&quot;headerlink&quot; title=&quot;[系统]用例模型&quot;&gt;&lt;/a&gt;[系统]用例模型&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;用来规定系统开发需求，描述的是系统范围(需求范围)

在RUP中，系统的功能性需求完全由用例模型来表达。简言之，用例模型就是“需求规格说明书”

在用例模型中用例使用精化关系来连接到业务用例(如果没有业务建模就不需要)
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;主要内容&quot;&gt;&lt;a href=&quot;#主要内容&quot; class=&quot;headerlink&quot; title=&quot;主要内容&quot;&gt;&lt;/a&gt;主要内容&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;用例视图&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;包括参与者与用例，是系统功能性需求的高层视图
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;用例规约&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;描述参与者如何启动和终止用例，如何使用用例完成目标，执行的事件流，相应的规则等
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;补充规约&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;描述与用例相关的非功能性需求。Eg:响应时间、可靠性、可用性等。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;业务规则&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;描述客户执行业务必须遵守的各种规定，亦或是操作规范、约束机制等。采用计算机语言表达，如伪代码编写，IF(条件)THEN(执行)。

业务规则应当被引用到用例规约中。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;用例实现&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;用例的一种实现方式，通常代表不同的应用环境。如之前提到的缴费用例。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;用例场景&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;描述参与者如何与计算机之间交互一达成其目的，可采用交互图来描述。
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;获取用例&quot;&gt;&lt;a href=&quot;#获取用例&quot; class=&quot;headerlink&quot; title=&quot;获取用例&quot;&gt;&lt;/a&gt;获取用例&lt;/h4&gt;&lt;p&gt;基本方法：&lt;/p&gt;
&lt;p&gt;分析业务用例场景，尤其是活动图。因为活动图中包含泳道，方便观察业务主角和业务工人的职责(活动)。一开始，可以简单&lt;br&gt;地把每个泳道中的活动都作为一个用例，已泳道为参与者，把它们绘制出来。然后考虑下面问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;排除用例&lt;/p&gt;
&lt;p&gt;  如果参与者不使用计算机来使用这个用例，或者计算机条件不允许，则与客户沟通后，排除。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;合并用例&lt;/p&gt;
&lt;p&gt;  用例可能有不同名字，但它们结果相同或相似，可以合并。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;抽象用例 &lt;/p&gt;
&lt;p&gt;  分析参与者使用它们的方式，使用方式可从用例场景中归纳。如果有这样情况，就抽象用例：结果虽然不同，但使用过程相同，则应当抽象出一个描述行为的用例。&lt;/p&gt;
&lt;p&gt;  Eg:查询报表A和查询报表B是两个不同的目的，有不同结果，但查询条件的过程一致，则抽象一个设置查询条件的用例，查询A和查询B都包含这个用例。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;补充用例&lt;/p&gt;
&lt;p&gt;  想系统加入那些与业务无关，但对系统运行必须的非业务需求。Eg:管理用户账号、备份系统数据等。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;领域模型&quot;&gt;&lt;a href=&quot;#领域模型&quot; class=&quot;headerlink&quot; title=&quot;领域模型&quot;&gt;&lt;/a&gt;领域模型&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;采用业务对象建立起来的一种模型。

是从所有业务用例场景对象交互模型当中抽象出来的更高级别的业务对象模型；它表示了业务对象结构和交互的一般规律，揭示了业务
运行的“本质”和“核心”。

可以帮助我们理解问题领域中的关键概念和关键对象。Eg:网上交易中，安全是一个重要课题，那么我们可以专门为安全解决方案建立
领域模型。
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;分析模型&quot;&gt;&lt;a href=&quot;#分析模型&quot; class=&quot;headerlink&quot; title=&quot;分析模型&quot;&gt;&lt;/a&gt;分析模型&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;使用分析类来建立系统原型，MVC模式的经典应用

在系统用例模型建立之后，设计模型建立之前，建立分析模型。

分析模型是设计模型的抽象或泛化关系。
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;软件架构和框架模型&quot;&gt;&lt;a href=&quot;#软件架构和框架模型&quot; class=&quot;headerlink&quot; title=&quot;软件架构和框架模型&quot;&gt;&lt;/a&gt;软件架构和框架模型&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;RUP是以架构为中心的开发模式。
&lt;/code&gt;&lt;/pre&gt;&lt;font color=&quot;red&quot;&gt;&lt;br&gt;框架和架构：&lt;br&gt;    框架：解决方案，是加速和提高系统质量的半成品。&lt;br&gt;    架构：系统蓝图，是对系统高层次的定义和描述。&lt;br&gt;&lt;/font&gt;

&lt;h3 id=&quot;软件架构&quot;&gt;&lt;a href=&quot;#软件架构&quot; class=&quot;headerlink&quot; title=&quot;软件架构&quot;&gt;&lt;/a&gt;软件架构&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;业务架构&lt;/p&gt;
&lt;p&gt;  业务领域的理解&lt;/p&gt;
&lt;p&gt;  在先启(RUP四个阶段：先启、精化、构建、产品化)阶段建立，精化阶段改进。&lt;/p&gt;
&lt;p&gt;  目标：为业务领域建立一个维护和扩展的逻辑结构，描述业务的构成。&lt;/p&gt;
&lt;p&gt;  来源：业务用例和领域模型&lt;/p&gt;
&lt;p&gt;  使用领域包和组织结构包来表示业务主要领域和组织结构关系。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;软件架构&lt;/p&gt;
&lt;p&gt;  系统领域的理解&lt;/p&gt;
&lt;p&gt;  视角&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;*   广度视角

    常见的软件层次结构，关注软件的分层，规定每一层的职责以及层之间的通信标准。

    一般使用层包来绘制。

*   深度视角

    广度视角中每一层的详细说明，关注每一层以及每个部分的具体实现架构。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  在业务架构的基础上引入计算机环境，说明业务架构如何分布在计算机环境中，并得以执行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;*   硬件环境：网络拓扑结构、服务器及其他设备

*   软件环境：操作系统、应用服务器、中间件、DB及其他第三方支持软件。
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;软件框架&quot;&gt;&lt;a href=&quot;#软件框架&quot; class=&quot;headerlink&quot; title=&quot;软件框架&quot;&gt;&lt;/a&gt;软件框架&lt;/h3&gt;&lt;p&gt;略&lt;/p&gt;
&lt;h3 id=&quot;何时使用？&quot;&gt;&lt;a href=&quot;#何时使用？&quot; class=&quot;headerlink&quot; title=&quot;何时使用？&quot;&gt;&lt;/a&gt;何时使用？&lt;/h3&gt;&lt;p&gt;架构可选，框架必须&lt;/p&gt;
&lt;h2 id=&quot;设计模型&quot;&gt;&lt;a href=&quot;#设计模型&quot; class=&quot;headerlink&quot; title=&quot;设计模型&quot;&gt;&lt;/a&gt;设计模型&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;我们通常说的详细设计。

采用设计类来实现用例的
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;从分析模型映射到设计模型&quot;&gt;&lt;a href=&quot;#从分析模型映射到设计模型&quot; class=&quot;headerlink&quot; title=&quot;从分析模型映射到设计模型&quot;&gt;&lt;/a&gt;从分析模型映射到设计模型&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;* 分析类代表设计元素的实例所承担的角色；

* 这些角色可由1+个设计模型元素来实现；

* 单个设计元素也可以实现多个角色。
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;方法&quot;&gt;&lt;a href=&quot;#方法&quot; class=&quot;headerlink&quot; title=&quot;方法&quot;&gt;&lt;/a&gt;方法&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;一个分析类对应一个设计类&lt;/li&gt;
&lt;li&gt;一个分析类对应一个设立类的一部分&lt;/li&gt;
&lt;li&gt;一个分析类设计成为设计模型的一个聚合类关系&lt;/li&gt;
&lt;li&gt;一个分析类设计成为设计模型中从同一个类继承而来的一组类&lt;/li&gt;
&lt;li&gt;一个分析类设计成为设计模型的中一组功能相关的类&lt;/li&gt;
&lt;li&gt;一个分析类对应一个设计模型的包&lt;/li&gt;
&lt;li&gt;一个分析类对应一个设计模型的关系&lt;/li&gt;
&lt;li&gt;分析类间的关系可以成为一个设计类&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;组件模型&quot;&gt;&lt;a href=&quot;#组件模型&quot; class=&quot;headerlink&quot; title=&quot;组件模型&quot;&gt;&lt;/a&gt;组件模型&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;组件总是用来容纳分析类和设计类的 。

简言之，组件是一种特殊的“包”，普通包起到组织和容纳作用，而组件的组织行为却有着特别的目标：这些分析类或设计类被组织起来
完成一组特定的功能。

组件与架构密不可分：

        架构是组件的设计规范，是组件的安装平台，是组件的运行环境，组件的管理环境。       
        Eg：J2EE架构和EJB组件、.NET架构和COM组件、SOA架构和SCA组件。
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;何时使用？-1&quot;&gt;&lt;a href=&quot;#何时使用？-1&quot; class=&quot;headerlink&quot; title=&quot;何时使用？&quot;&gt;&lt;/a&gt;何时使用？&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;分布式系统要考虑使用组件&lt;/li&gt;
&lt;li&gt;需要第三方提供支持服务&lt;/li&gt;
&lt;li&gt;没有采用架构开发&lt;/li&gt;
&lt;li&gt;与现存的第三方系统集成&lt;/li&gt;
&lt;li&gt;项目将某部分业务功能单独抽去出来，形成一个可复用的单元&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;广义组件&quot;&gt;&lt;a href=&quot;#广义组件&quot; class=&quot;headerlink&quot; title=&quot;广义组件&quot;&gt;&lt;/a&gt;广义组件&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;抛弃组件的特性（完备、独立、逻辑、透明），就是对物理代码进行组织的一个“包”

子系统、模块、类库、可执行程序等都是广义组件
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;实施模型&quot;&gt;&lt;a href=&quot;#实施模型&quot; class=&quot;headerlink&quot; title=&quot;实施模型&quot;&gt;&lt;/a&gt;实施模型&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;由配置节点(用节点元素绘制)和组件构成

用来描述系统硬件的物理拓扑结构

通常在分布式系统中使用

一个节点表示一个计算单元，通常是硬件,Eg:一台主机

组件代表可执行的物理代码模块，Eg:一个可执行程序
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;何时使用？-2&quot;&gt;&lt;a href=&quot;#何时使用？-2&quot; class=&quot;headerlink&quot; title=&quot;何时使用？&quot;&gt;&lt;/a&gt;何时使用？&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;分布式系统&lt;/li&gt;
&lt;li&gt;需要多方模块参与&lt;/li&gt;
&lt;li&gt;多个硬件设备&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;模型就是一堆有意义的静态图和动态图组合在一起，表达了一个有意义的中心思想。&lt;/p&gt;
&lt;p&gt;简言之，一个模型提出了论点，静态图是论据，动态图是
    
    </summary>
    
      <category term="UML" scheme="https://utihbi.github.io/categories/UML/"/>
    
    
      <category term="UML" scheme="https://utihbi.github.io/tags/UML/"/>
    
  </entry>
  
  <entry>
    <title>工厂模式</title>
    <link href="https://utihbi.github.io/2016/07/23/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>https://utihbi.github.io/2016/07/23/工厂模式/</id>
    <published>2016-07-23T06:28:06.000Z</published>
    <updated>2016-07-23T07:01:34.790Z</updated>
    
    <content type="html">&lt;h2 id=&quot;基本知识&quot;&gt;&lt;a href=&quot;#基本知识&quot; class=&quot;headerlink&quot; title=&quot;基本知识&quot;&gt;&lt;/a&gt;基本知识&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;开闭原则（Open Close Principle）:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对扩展开放，对修改关闭。&lt;/p&gt;
&lt;p&gt;在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。&lt;/p&gt;
&lt;p&gt;简言之，是为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类，后面的具体设计中我们会提到这点。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;创建型模式：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用&lt;font color=&quot;red&quot;&gt;new&lt;/font&gt;的运算符直接实例化对象&lt;/p&gt;
&lt;p&gt;目的：主要是用来创建对象，减少我们在使用某个对象时的&lt;font color=&quot;red&quot;&gt;new()&lt;/font&gt; 操作&lt;/p&gt;
&lt;h2 id=&quot;工厂模式&quot;&gt;&lt;a href=&quot;#工厂模式&quot; class=&quot;headerlink&quot; title=&quot;工厂模式&quot;&gt;&lt;/a&gt;工厂模式&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;为客户调用程序与具体的对象类型之间提供了一个解耦作用

简言之，应用程序不关心这个对象是怎么出来的，只关系如何使用这个对象，而且以后就算对象发生变化，那么也不需要修改用户应用

程序的代码。

提高了程序的可维护性和低耦合性。
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;简单工厂模式（创建型模式）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;定义了一种工厂，该工厂负责所有的子类对象的创建，如果说我们的工厂要求能够满足增加新的对象时，我们必须修改工厂代码

应用场景：适合对象类型不多，并且不会经常新增的情况下。

涉及角色：
    1、具体工厂类角色：有一定的商业逻辑和判断逻辑。    

    2、抽象产品角色：它一般是具体产品继承的父类或者实现的接口。

    3、具体产品角色：工厂类所创建的对象就是此角色的实例。
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;工厂方法模式（创建型模式）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;每个类型的对象都有与这个类型对应的工厂去创建，那么就算以后增加或者修改，只需要修改相应的工厂涉及的文件即可

应用场景：适合对象类型较多，并且会经常新增的情况下。

涉及角色：
    1、抽象工厂类角色：具体工厂角色必须实现的接口或者必须继承的父类。    

    2、具体工厂类角色

    3、抽象产品角色

    4、具体产品角色
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;font color=&quot;red&quot;&gt;&lt;br&gt;简单工厂模式，不符合开闭原则，因为所有的对象的创建工作都放在一个工厂类的内部去完成，逻辑太复杂。&lt;br&gt;&lt;br&gt;工厂方法模式，将每个工厂的职责进行了更细化，每个工厂只负责具体对象类型实例的创建。&lt;br&gt;&lt;/font&gt;

&lt;ul&gt;
&lt;li&gt;抽象工厂模式（创建型模式）&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;应用场景：支持动态的新增对象类型和新增工厂类型，实现多种依赖关系的对象或者组合关系的创建（产品族）

        简言之，具有相互依赖或者组合关系的对象类型实例的创建工作中使用。Eg:下面代码中绘制带颜色的图形。

涉及角色：
    1、抽象工厂类角色  

    2、具体工厂类角色

    3、抽象产品角色

    4、具体产品角色
&lt;/code&gt;&lt;/pre&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;50&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;51&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;52&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;53&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;54&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;55&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;56&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;57&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;58&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;59&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;60&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;61&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;62&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;63&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;64&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;65&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;66&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;67&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;68&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;69&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;70&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;71&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;72&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;73&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;74&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;75&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;76&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;77&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;78&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;79&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;80&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;81&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;82&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;83&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;84&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;85&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;86&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;87&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;88&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;89&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;90&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;91&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;92&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;93&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;94&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;95&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;96&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;97&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;98&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;99&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;100&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;101&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;102&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;103&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;104&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;105&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;106&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;107&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;108&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;109&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;110&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;111&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;112&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;113&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;114&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;115&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;116&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;117&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;118&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;119&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;120&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;121&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;122&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;123&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;124&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;125&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;126&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;127&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;128&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;129&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;130&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;131&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;132&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;133&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;134&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;135&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;136&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;137&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;138&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;139&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;140&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;141&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;142&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;143&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;144&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;145&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;146&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;147&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;148&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;149&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;150&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;151&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;152&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;153&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;154&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;155&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;156&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;157&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;158&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;159&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/****简单工厂****/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//1、创建产品接口&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Shape&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//2、创建具体产品并实现产品接口&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Rectangle&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Shape&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;Rectangle implements Shape&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Square&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Shape&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;Square implements Shape&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Circle&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Shape&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;Circle implements Shape&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//3、创建工厂，通过工厂创建产品&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ShapeFactory&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Shape &lt;span class=&quot;title&quot;&gt;getShape&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String shapeName)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; == shapeName)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Rectangle&quot;&lt;/span&gt;.equals(shapeName))&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Rectangle();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Square&quot;&lt;/span&gt;.equals(shapeName))&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Square();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Circle();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/****工厂方法****/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//3、创建工厂接口&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ShapeFactoryI&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Shape &lt;span class=&quot;title&quot;&gt;getShapeFactoryDetail&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//4、创建具体工厂并实现工厂接口&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;RectangleFactory&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ShapeFactoryI&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Shape &lt;span class=&quot;title&quot;&gt;getShapeFactoryDetail&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Rectangle();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SquareFactory&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ShapeFactoryI&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Shape &lt;span class=&quot;title&quot;&gt;getShapeFactoryDetail&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Square();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CircleFactory&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ShapeFactoryI&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Shape &lt;span class=&quot;title&quot;&gt;getShapeFactoryDetail&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Circle();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/****抽象工厂****/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*   1、 定义两个产品接口&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*   2、 定义具体产品  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*   3、 定义抽象工厂&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*   4、 定义具体工厂&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*   1、创建产品1接口（上面的Shape接口）&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*      创建产品2接口（这里的Color接口）&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Color&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//public Color getColor();&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//well, in practice ,you should define like the above;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getColor&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*   2、创建具体产品并实现产品1接口（上面的Shape接口）&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*      创建具体产品并实现产品2接口（这里的Color接口）&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Red&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Color&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getColor&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;Red	implements Color&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Green&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Color&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getColor&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;Green	implements Color&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Black&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Color&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getColor&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;Black 	implements Color&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*   3、定义抽象工厂&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AbstractFactory&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Color &lt;span class=&quot;title&quot;&gt;getColorDetail&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Shape &lt;span class=&quot;title&quot;&gt;getShapeDetail&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*   4、定义具体工厂&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;GreenSquareFactory&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AbstractFactory&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;  Color &lt;span class=&quot;title&quot;&gt;getColorDetail&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Green();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Shape &lt;span class=&quot;title&quot;&gt;getShapeDetail&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Square();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/********************测试程序******************/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MainTest&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	 &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;simple factory TEST&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		Rectangle rectangle = (Rectangle)ShapeFactory.getShape(&lt;span class=&quot;string&quot;&gt;&quot;Rectangle&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		rectangle.draw();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		 &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;\nfactory pattern TEST&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		ShapeFactoryI shapeFactory = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; CircleFactory();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		Circle circle = (Circle)shapeFactory.getShapeFactoryDetail();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		circle.draw();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		 &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;\nabstract factory TEST&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		AbstractFactory abstractFactory = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; GreenSquareFactory();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		abstractFactory.getColorDetail().getColor();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		abstractFactory.getShapeDetail().draw();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;基本知识&quot;&gt;&lt;a href=&quot;#基本知识&quot; class=&quot;headerlink&quot; title=&quot;基本知识&quot;&gt;&lt;/a&gt;基本知识&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;开闭原则（Open Close Principle）:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对扩展开放，对修改关
    
    </summary>
    
      <category term="设计模式" scheme="https://utihbi.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://utihbi.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>String类为什么是final的</title>
    <link href="https://utihbi.github.io/2016/07/22/String%E7%B1%BB%E4%B8%BA%E4%BB%80%E4%B9%88%E6%98%AFfinal%E7%9A%84/"/>
    <id>https://utihbi.github.io/2016/07/22/String类为什么是final的/</id>
    <published>2016-07-22T09:28:06.000Z</published>
    <updated>2016-07-22T09:33:48.259Z</updated>
    
    <content type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;安全性： 在网络、DB连接中，参数类型是String,还有用户名密码等。如果String 可变，那这些参数值很容易别人改掉；网络连接，DB连接中很容易被攻击。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;同步和并发问题：线程安全因此没有同步问题；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;缓存：当编译优化时，如果两个实例值一样，那就可以new一个对象，让两个引用都指向同一个实例。JVM底层就这样设&lt;/p&gt;
&lt;p&gt;  计的。换言之，Stirng可以改变，那一个引用改变了值，那其他指向这个实例的引用的值也改变了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;类加载：String被用作类加载的参数，如果可以改变，那将加载错误的类或加载不到类。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hask Key：不可变实例非常适合做hash表的key。否则，hash表的值会出现丢失情况。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;长度：长度是确定的，不会改变的。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;安全性： 在网络、DB连接中，参数类型是String,还有用户名密码等。如果String 可变，那这些参数值很容易别人改掉；网络连接，DB连接中很容易被攻击。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;同步和并发问题：线程安全因此没有同步问题；&lt;/p&gt;
&lt;/li&gt;
    
    </summary>
    
      <category term="JAVA" scheme="https://utihbi.github.io/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="https://utihbi.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>细说UML核心视图</title>
    <link href="https://utihbi.github.io/2016/07/22/%E7%BB%86%E8%AF%B4UML%E6%A0%B8%E5%BF%83%E8%A7%86%E5%9B%BE/"/>
    <id>https://utihbi.github.io/2016/07/22/细说UML核心视图/</id>
    <published>2016-07-22T06:52:06.000Z</published>
    <updated>2016-07-22T07:07:32.945Z</updated>
    
    <content type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;描述软件和现实一样，都需要描述&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;系统的结构性特征(系统能做什么)———–静态视图&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;系统运行时特征(系统怎么做)——–动态视图&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;UML视图分类&quot;&gt;&lt;a href=&quot;#UML视图分类&quot; class=&quot;headerlink&quot; title=&quot;UML视图分类&quot;&gt;&lt;/a&gt;UML视图分类&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;静态视图：&lt;pre&gt;&lt;code&gt;用例图、类图、包图等
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;动态视图：&lt;pre&gt;&lt;code&gt;活动图、状态图、时序图、协作图等
&lt;/code&gt;&lt;/pre&gt;&lt;font color=&quot;red&quot;&gt;&lt;br&gt;  注：动态视图不能独立存在，必须特指一个静态视图或UML元素，说明静态视图规定的事物结构下它们的动态行为。&lt;br&gt;&lt;/font&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;静态视图&quot;&gt;&lt;a href=&quot;#静态视图&quot; class=&quot;headerlink&quot; title=&quot;静态视图&quot;&gt;&lt;/a&gt;静态视图&lt;/h1&gt;&lt;h2 id=&quot;用例图&quot;&gt;&lt;a href=&quot;#用例图&quot; class=&quot;headerlink&quot; title=&quot;用例图&quot;&gt;&lt;/a&gt;用例图&lt;/h2&gt;&lt;h3 id=&quot;业务用例视图&quot;&gt;&lt;a href=&quot;#业务用例视图&quot; class=&quot;headerlink&quot; title=&quot;业务用例视图&quot;&gt;&lt;/a&gt;业务用例视图&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;展现了业务系统的功能性需求，如果要描述这些需求的实现路径，需要借助下面的业务用例实现视图
&lt;/code&gt;&lt;/pre&gt;&lt;center&gt;&lt;img src=&quot;http://oald9ve1g.bkt.clouddn.com/hexo/img/bu_use.png&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

&lt;h3 id=&quot;业务用例实现视图&quot;&gt;&lt;a href=&quot;#业务用例实现视图&quot; class=&quot;headerlink&quot; title=&quot;业务用例实现视图&quot;&gt;&lt;/a&gt;业务用例实现视图&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;展现业务用例有哪些实现途径
&lt;/code&gt;&lt;/pre&gt;&lt;center&gt;&lt;img src=&quot;http://oald9ve1g.bkt.clouddn.com/hexo/img/bu_use_re.png&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

&lt;h3 id=&quot;概念用例视图&quot;&gt;&lt;a href=&quot;#概念用例视图&quot; class=&quot;headerlink&quot; title=&quot;概念用例视图&quot;&gt;&lt;/a&gt;概念用例视图&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;从业务用例中经过分析分解出来的关键概念用例，并表示概念用例和业务用例直接的关系；

一般来说，这些关系包括 扩展、包含、精化。

以业务用例为单元展现，即视图名称命名为业务用例名称
&lt;/code&gt;&lt;/pre&gt;&lt;center&gt;&lt;img src=&quot;http://oald9ve1g.bkt.clouddn.com/hexo/img/cn_use.png&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

&lt;h3 id=&quot;系统用例图&quot;&gt;&lt;a href=&quot;#系统用例图&quot; class=&quot;headerlink&quot; title=&quot;系统用例图&quot;&gt;&lt;/a&gt;系统用例图&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;展现系统范围，对业务用例进行分析后得到到系统用例展现出来；

以业务用例为单元展现；
&lt;/code&gt;&lt;/pre&gt;&lt;center&gt;&lt;img src=&quot;http://oald9ve1g.bkt.clouddn.com/hexo/img/sys_use.png&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

&lt;h3 id=&quot;系统用例实现视图&quot;&gt;&lt;a href=&quot;#系统用例实现视图&quot; class=&quot;headerlink&quot; title=&quot;系统用例实现视图&quot;&gt;&lt;/a&gt;系统用例实现视图&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;展现系统用例有哪些实现途径
&lt;/code&gt;&lt;/pre&gt;&lt;center&gt;&lt;img src=&quot;http://oald9ve1g.bkt.clouddn.com/hexo/img/sys_use_re.png&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

&lt;h2 id=&quot;类图&quot;&gt;&lt;a href=&quot;#类图&quot; class=&quot;headerlink&quot; title=&quot;类图&quot;&gt;&lt;/a&gt;类图&lt;/h2&gt;&lt;h3 id=&quot;概念层类图-业务建模阶段&quot;&gt;&lt;a href=&quot;#概念层类图-业务建模阶段&quot; class=&quot;headerlink&quot; title=&quot;概念层类图(业务建模阶段)&quot;&gt;&lt;/a&gt;概念层类图(业务建模阶段)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;独立于实现语言和实现方式；&lt;/li&gt;
&lt;li&gt;&lt;p&gt;描述现实世界中问题领域的概念理解；&lt;/p&gt;
&lt;p&gt; 简言之，表达的类与现实世界问题领域有明显的对应关系；但与最终实现的类不一定有直接和明显的对应的关系&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;说明层类图-概念建模阶段&quot;&gt;&lt;a href=&quot;#说明层类图-概念建模阶段&quot; class=&quot;headerlink&quot; title=&quot;说明层类图(概念建模阶段)&quot;&gt;&lt;/a&gt;说明层类图(概念建模阶段)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;考察类的接口不是实现&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;表达的类和类关系是对问题领域在接口层次的抽象描述；&lt;/p&gt;
&lt;p&gt;  简言之，不关心编程语言，设计模式等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;现实世界和最终实现之间的桥梁。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;实现层类图-设计建模阶段&quot;&gt;&lt;a href=&quot;#实现层类图-设计建模阶段&quot; class=&quot;headerlink&quot; title=&quot;实现层类图(设计建模阶段)&quot;&gt;&lt;/a&gt;实现层类图(设计建模阶段)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;类是实现代码的描述；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;要明确：编程语言、设计模式、通信标准等；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;包图&quot;&gt;&lt;a href=&quot;#包图&quot; class=&quot;headerlink&quot; title=&quot;包图&quot;&gt;&lt;/a&gt;包图&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;略
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;动态视图&quot;&gt;&lt;a href=&quot;#动态视图&quot; class=&quot;headerlink&quot; title=&quot;动态视图&quot;&gt;&lt;/a&gt;动态视图&lt;/h1&gt;&lt;h2 id=&quot;活动图&quot;&gt;&lt;a href=&quot;#活动图&quot; class=&quot;headerlink&quot; title=&quot;活动图&quot;&gt;&lt;/a&gt;活动图&lt;/h2&gt;&lt;p&gt;描述了为了完成某一个目标需要做的活动以及这些活动的执行顺序。【面向过程的视图】&lt;/p&gt;
&lt;p&gt;实际建模过程中，活动图主要用来&lt;em&gt;业务场景建模&lt;/em&gt;和&lt;em&gt;用例场景建模&lt;/em&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;描述用例场景&lt;/li&gt;
&lt;li&gt;描述对象交互&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;用例活动图&quot;&gt;&lt;a href=&quot;#用例活动图&quot; class=&quot;headerlink&quot; title=&quot;用例活动图&quot;&gt;&lt;/a&gt;用例活动图&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;用例表达了参与者的一个目标，用例场景则描述了如何达到这个目标。

用例活动图用来描述用例场景，即通常说的业务流程。

业务流程通过多个活动按照一定的条件和顺序来推进。每个活动完成一个工作单元。
&lt;/code&gt;&lt;/pre&gt;&lt;center&gt;&lt;img src=&quot;http://oald9ve1g.bkt.clouddn.com/hexo/img/activity.png&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

&lt;h3 id=&quot;对象活动图&quot;&gt;&lt;a href=&quot;#对象活动图&quot; class=&quot;headerlink&quot; title=&quot;对象活动图&quot;&gt;&lt;/a&gt;对象活动图&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;用于展示对象交互。

可理解为对实现层类图实例化后对象交互的情况。
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;状态图&quot;&gt;&lt;a href=&quot;#状态图&quot; class=&quot;headerlink&quot; title=&quot;状态图&quot;&gt;&lt;/a&gt;状态图&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;显示一个状态机。状态机用于对模型元素的动态行为建模；

换言之，对系统行为中受事件驱动的方面进行建模。

通常用来说明业务角色或业务实体可能的状态————导致状态转换的事件和状态转换引起的操作。

对于类的对象的所有状态，状态图都显示它可能接受的信息、将执行的操作和在此之后对象所处的状态。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;center&gt;&lt;img src=&quot;http://oald9ve1g.bkt.clouddn.com/hexo/img/status.png&quot; alt=&quot;&quot;&gt;&lt;/center&gt;&lt;/p&gt;
&lt;font color=&quot;red&quot;&gt;&lt;br&gt;    状态图只用于描述单个对象的行为；&lt;br&gt;&lt;br&gt;    对象间的交互采用时序图和协作图；&lt;br&gt;&lt;/font&gt;


&lt;h2 id=&quot;时序图&quot;&gt;&lt;a href=&quot;#时序图&quot; class=&quot;headerlink&quot; title=&quot;时序图&quot;&gt;&lt;/a&gt;时序图&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;描述按时间顺序排列的对象间的交互模式；

按照参与交互的对象所具有的“生命线”和它们相互交互发送的消息来显示这些对象。

实际中：
        我们用时序图来描述用例实现

使用时序图来描述用例实现是一种从现实世界到对象世界的一种映射方法。
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;业务模型时序图(业务建模阶段)&lt;/p&gt;
&lt;p&gt;  对业务实体对象绘制(为业务实体交互建模，实现业务用例)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;概念模型时序图(概念建模阶段)&lt;/p&gt;
&lt;p&gt;  对分析类对象绘制(已带有计算机的理解)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;设计模型时序图(设计建模阶段)    &lt;/p&gt;
&lt;p&gt;  对设计类对象绘制（消息细致到方法级别）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;协作图&quot;&gt;&lt;a href=&quot;#协作图&quot; class=&quot;headerlink&quot; title=&quot;协作图&quot;&gt;&lt;/a&gt;协作图&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;描述了对象间交互的一种模式；

通过对象间的连接和它们相互发送的消息来显示参与交互的对象。

可以为用例事件流的每一个变化形式制作一个协作图。
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;业务模型时序图(业务建模阶段)&lt;/p&gt;
&lt;p&gt;  对业务实体对象绘制(为业务实体交互建模，实现业务用例)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;概念模型时序图(概念建模阶段)&lt;/p&gt;
&lt;p&gt;  对分析类对象绘制(已带有计算机的理解)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;设计模型时序图(设计建模阶段)    &lt;/p&gt;
&lt;p&gt;  对设计类对象绘制（消息细致到方法级别）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;font color=&quot;red&quot;&gt;&lt;br&gt;注：&lt;br&gt;    1.  时序图和协作图式可以相互转化的；&lt;font color=&quot;green&quot;&gt;（rose中 F5 即可相互转化）&lt;/font&gt;&lt;br&gt;&lt;br&gt;    2.  时序图强调消息事件发生的顺序，方便阐述事件流的过程，或方便调用过程的理解；&lt;br&gt;&lt;br&gt;    3.  协作图来展现了对象间的关系，方便获得对对象结构的理解。&lt;br&gt;&lt;/font&gt;


&lt;p&gt;参考资料：《Tinking in UML》(大象书)&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;描述软件和现实一样，都需要描述&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;系统的结构性特征(系统能做什么)———–静态视图&lt;/p&gt;
&lt;/li&gt;
&lt;li
    
    </summary>
    
      <category term="UML" scheme="https://utihbi.github.io/categories/UML/"/>
    
    
      <category term="UML" scheme="https://utihbi.github.io/tags/UML/"/>
    
  </entry>
  
  <entry>
    <title>不同平台造成的文本换行符差异(CRLF)</title>
    <link href="https://utihbi.github.io/2016/07/22/%E4%B8%8D%E5%90%8C%E5%B9%B3%E5%8F%B0%E9%80%A0%E6%88%90%E7%9A%84%E6%96%87%E6%9C%AC%E6%8D%A2%E8%A1%8C%E7%AC%A6%E5%B7%AE%E5%BC%82(CRLF)/"/>
    <id>https://utihbi.github.io/2016/07/22/不同平台造成的文本换行符差异(CRLF)/</id>
    <published>2016-07-22T02:40:06.000Z</published>
    <updated>2016-07-22T02:59:54.548Z</updated>
    
    <content type="html">&lt;h2 id=&quot;问题背景&quot;&gt;&lt;a href=&quot;#问题背景&quot; class=&quot;headerlink&quot; title=&quot;问题背景&quot;&gt;&lt;/a&gt;问题背景&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;还记得自己之前提交代码(win-&amp;gt;linux),提交完后系统就奔溃了，笔者当时就懵逼了。到服务器上一看代码，每行代码末尾无端的了多了&lt;font color=&quot;red&quot;&gt; ^M  &lt;/font&gt;的字符。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;今天往Git上提交时，又遇到了&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;warning: LF will be replaced by CRLF in stuManager1/GitTest.txt.&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当然，对于warning，您完全可以置之不理。&lt;/p&gt;
&lt;p&gt;好了，到这里，我们可以说说上面问题的本质原因了。&lt;/p&gt;
&lt;h2 id=&quot;涉及知识&quot;&gt;&lt;a href=&quot;#涉及知识&quot; class=&quot;headerlink&quot; title=&quot;涉及知识&quot;&gt;&lt;/a&gt;涉及知识&lt;/h2&gt;&lt;p&gt;对于文本处理，不同平台使用的换行操作符是不一样的。这也就是上述问题产生的原因了。&lt;/p&gt;
&lt;p&gt;实际编程中，大家应该写过&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;\r\n&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//或者&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;\n&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们给这俩字符起个名字：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;\r //CR(Carriage Return,回车)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;\n //LF(Line Feed，换行)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Dos和Windows采用回车+换行CRLF表示下一行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;而UNIX/Linux采用换行符LF表示下一行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;MAC OS系统采用回车符CR表示下一行&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;解决方案&quot;&gt;&lt;a href=&quot;#解决方案&quot; class=&quot;headerlink&quot; title=&quot;解决方案&quot;&gt;&lt;/a&gt;解决方案&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;命令式&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;/******************vi 中编辑：******************/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;:set fileformat=unix&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;:set fileformat=dos&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;:set fileformat=mac&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//上面3个命令按需设置；&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/*******************linux/unix******************/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;dos2unix filename&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;unix2dos filename&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//不啰嗦，一目了然&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;工具式&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Notepad++ :&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://oald9ve1g.bkt.clouddn.com/hexo/img/notepad.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Beyond Compare：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://oald9ve1g.bkt.clouddn.com/hexo/img/beyond.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;附加知识点&quot;&gt;&lt;a href=&quot;#附加知识点&quot; class=&quot;headerlink&quot; title=&quot;附加知识点&quot;&gt;&lt;/a&gt;附加知识点&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;对于ASCII 文本格式，不同平台通过FTP传输时，有可能自动转换。&lt;br&gt;可以使用bin模式(二进制模式)传输文本来防止转换。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;linux下通过命令&lt;code&gt;file yourfile&lt;/code&gt; 查看文件 换行符；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://oald9ve1g.bkt.clouddn.com/hexo/img/gitbash_CTLF.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题背景&quot;&gt;&lt;a href=&quot;#问题背景&quot; class=&quot;headerlink&quot; title=&quot;问题背景&quot;&gt;&lt;/a&gt;问题背景&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;还记得自己之前提交代码(win-&amp;gt;linux),提交完后系统就奔溃了，笔者当时就懵逼了。到服务器上一
    
    </summary>
    
      <category term="linux" scheme="https://utihbi.github.io/categories/linux/"/>
    
    
      <category term="CRLF" scheme="https://utihbi.github.io/tags/CRLF/"/>
    
  </entry>
  
  <entry>
    <title>漫谈接口和抽象类</title>
    <link href="https://utihbi.github.io/2016/07/21/%E6%BC%AB%E8%B0%88%E6%8E%A5%E5%8F%A3%E5%92%8C%E6%8A%BD%E8%B1%A1%E7%B1%BB/"/>
    <id>https://utihbi.github.io/2016/07/21/漫谈接口和抽象类/</id>
    <published>2016-07-21T06:05:06.000Z</published>
    <updated>2016-07-21T06:51:43.177Z</updated>
    
    <content type="html">&lt;h2 id=&quot;接口和抽象类&quot;&gt;&lt;a href=&quot;#接口和抽象类&quot; class=&quot;headerlink&quot; title=&quot;接口和抽象类&quot;&gt;&lt;/a&gt;接口和抽象类&lt;/h2&gt;&lt;h3 id=&quot;接口的意义：&quot;&gt;&lt;a href=&quot;#接口的意义：&quot; class=&quot;headerlink&quot; title=&quot;接口的意义：&quot;&gt;&lt;/a&gt;接口的意义：&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;- 规范

    接口是用来规范类的，它可以避免类在设计上的不一致，这在多人合作的开发中犹为重要；

    它是一种标准，每一个实现它的类都要遵守这个接口定义的规则，标准。

- 扩展(解耦)

    最大程度的解耦，方便以后项目扩展 

        Eg:OOP的思想，底层定义了规范，上层来负责实现，打个比方说，jdbc中就是定义了数据库操作的接口，然后不同的数据

        库服务厂商实现不同的数据库操作。

- 回调(参见下一篇文章)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;抽象类的意义：&quot;&gt;&lt;a href=&quot;#抽象类的意义：&quot; class=&quot;headerlink&quot; title=&quot;抽象类的意义：&quot;&gt;&lt;/a&gt;抽象类的意义：&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;- 为其子类提供一个公共的类型；

- 封装子类中的重复内容；

- 定义了抽象方法，子类虽然有不同的实现，但定义是一致的。抽象类设计出来就是为了继承，实现多态。
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;接口和抽象类对比&quot;&gt;&lt;a href=&quot;#接口和抽象类对比&quot; class=&quot;headerlink&quot; title=&quot;接口和抽象类对比&quot;&gt;&lt;/a&gt;接口和抽象类对比&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;接口用来定义两个对象间通信的契约；&lt;/p&gt;
&lt;p&gt;  抽象类用来封装对象间公用的行为；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;接口适合为不相关的类提供通用功能；&lt;/p&gt;
&lt;p&gt;  抽象类主要应用于关系密切的对象间；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;实际编程中：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;我们关心do what，但不关心 how to do，我们可以用接口；&lt;/p&gt;
&lt;p&gt;我们既关心 what，又关心 how时，选用抽象类，但对象间对于某个what 时，how 却表现各异；当然，另一个what，&lt;/p&gt;
&lt;p&gt;又how的一致；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;将来想加个通用方法，抽象类中直接添加即可，继承的subClass无需任何更改；【模板式设计】接口如果添加，那所&lt;/p&gt;
&lt;p&gt;有实现的类都需更改；【辐射式设计】&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;我们可能现有一堆类，后面才慢慢抽象出类的共同的方法，更多是重构产生的【自下而上】；接口是一开始就定义好&lt;/p&gt;
&lt;p&gt;的一些规范【自上而下】&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;从继承角度来讲，如果类已经继承了一个父类，那此时就应该把这部分功能定义接口，实现多个接口是没有问题的，&lt;/p&gt;
&lt;p&gt;但只能单继承；(java中)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;扩展功能：将来某些具体类想扩展一项功能，如果直接在抽象类中添加该功能，那继承了该抽象类的另外一些具体类&lt;/p&gt;
&lt;p&gt;是不想要这些功能的，由于继承，却也给这些类这个功能；&lt;/p&gt;
&lt;p&gt;如果使用接口定义，哪些类想扩展功能，哪些类就实现接口即可；&lt;/p&gt;
&lt;p&gt;好的接口定义应该是具有专一功能性的，而不是多功能的，否则造成接口污染。（如果一个类只是实现了这个接口的&lt;/p&gt;
&lt;p&gt;中一个功能，而不得不去实现接口中的其他方法，就叫接口污染）   &lt;/p&gt;
&lt;p&gt; Eg:java中的 比较接口&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对一类事物进行抽象用抽象类，对行为进行抽象时用接口。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;java8中接口中方法可以有方法体，前提是 方法是 static；&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接口中 ：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;变量默认是 public static final

方法默认是 public abstract
&lt;/code&gt;&lt;/pre&gt;&lt;font color=&quot;red&quot;&gt;&lt;br&gt;    注：默认可以省略，但不能改变；具体看代码：&lt;br&gt;&lt;/font&gt;


&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;/*&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;* &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;* 接口的中的变量是所有实现类共有的，既然共有，肯定是不变的东西，因为变化的东西也不能够算共有。所以变量是不可变(final)类型，&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;* 也就是常量了。&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;interface TestIntf&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    public static final int a =2;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    public abstract void getName();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//这两段代码一致，我们平时为书写方便，多书写下面（懒，习惯少写）&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;interface TestIntf&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    int a =2;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    void getName();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;附加知识点：&quot;&gt;&lt;a href=&quot;#附加知识点：&quot; class=&quot;headerlink&quot; title=&quot;附加知识点：&quot;&gt;&lt;/a&gt;附加知识点：&lt;/h2&gt;&lt;h3 id=&quot;抽象：就是抽去像的部分&quot;&gt;&lt;a href=&quot;#抽象：就是抽去像的部分&quot; class=&quot;headerlink&quot; title=&quot;抽象：就是抽去像的部分&quot;&gt;&lt;/a&gt;抽象：就是抽去像的部分&lt;/h3&gt;&lt;h3 id=&quot;开闭原则：&quot;&gt;&lt;a href=&quot;#开闭原则：&quot; class=&quot;headerlink&quot; title=&quot;开闭原则：&quot;&gt;&lt;/a&gt;开闭原则：&lt;/h3&gt;&lt;p&gt;对修改关闭，对扩展开放；&lt;/p&gt;
&lt;p&gt;通俗的讲，你认为是要变化的东西，就放在你自己的实现中，不能放在接口中去，接口只是对一类事物的属性和行为更高层&lt;/p&gt;
&lt;p&gt;次的抽象。对修改关闭，对扩展（不同的实现 implements）开放，接口是对开闭原则的一种体现。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;接口和抽象类&quot;&gt;&lt;a href=&quot;#接口和抽象类&quot; class=&quot;headerlink&quot; title=&quot;接口和抽象类&quot;&gt;&lt;/a&gt;接口和抽象类&lt;/h2&gt;&lt;h3 id=&quot;接口的意义：&quot;&gt;&lt;a href=&quot;#接口的意义：&quot; class=&quot;headerlink&quot; titl
    
    </summary>
    
      <category term="JAVA" scheme="https://utihbi.github.io/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="https://utihbi.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>接口回调和向上转型</title>
    <link href="https://utihbi.github.io/2016/07/21/%E6%8E%A5%E5%8F%A3%E5%9B%9E%E8%B0%83%E5%92%8C%E5%90%91%E4%B8%8A%E8%BD%AC%E5%9E%8B/"/>
    <id>https://utihbi.github.io/2016/07/21/接口回调和向上转型/</id>
    <published>2016-07-21T06:03:06.000Z</published>
    <updated>2016-07-21T06:54:01.406Z</updated>
    
    <content type="html">&lt;h3 id=&quot;接口回调&quot;&gt;&lt;a href=&quot;#接口回调&quot; class=&quot;headerlink&quot; title=&quot;接口回调&quot;&gt;&lt;/a&gt;&lt;strong&gt;接口回调&lt;/strong&gt;&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;把implements某一接口的类创建的对象的引用赋给该接口声明的接口变量，那么该接口变量就可以调用被类实现

的接口的方法。实际上，当接口变量调用被类实现的接口中的方法时，就是通知相应的对象调用接口的方法，这一过程

称为对象功能的接口回调。
&lt;/code&gt;&lt;/pre&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;interface Animal&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   void sleep();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;class Cat implements Animal&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    public void sleep()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        System.out.println(&amp;quot;Cat sleep.&amp;quot;)；&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;class Dog implements Animal&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    public void sleep()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        System.out.println(&amp;quot;Dog sleep.&amp;quot;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;public class Example&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    public static void main(String args[])&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Animal a;       //声明接口变量&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        a=new Cat();    //实例化，接口变量中存放对象的引用&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        a.sleep();      //接口回调&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        a=new Dog();    //实例化，接口变量中存放对象的引用&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        a.sleep();      //接口回调&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;向上转型&quot;&gt;&lt;a href=&quot;#向上转型&quot; class=&quot;headerlink&quot; title=&quot;向上转型&quot;&gt;&lt;/a&gt;&lt;strong&gt;向上转型&lt;/strong&gt;&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;这个概念大家都不陌生，用在类间继承上,方便实现多态
&lt;/code&gt;&lt;/pre&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Father f = new Child();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;f.work();//Father中有work();Child覆写了work()；&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;二者联系：&quot;&gt;&lt;a href=&quot;#二者联系：&quot; class=&quot;headerlink&quot; title=&quot;二者联系：&quot;&gt;&lt;/a&gt;二者联系：&lt;/h3&gt;&lt;p&gt;java中：&lt;/p&gt;
&lt;p&gt;使用接口回调，可向上转型为多个基类型，因为一个类可实现多个接口；&lt;/p&gt;
&lt;p&gt;向上转型 只能转为一个基类型，因一个类只能继承一个父类；注重多态&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;接口回调&quot;&gt;&lt;a href=&quot;#接口回调&quot; class=&quot;headerlink&quot; title=&quot;接口回调&quot;&gt;&lt;/a&gt;&lt;strong&gt;接口回调&lt;/strong&gt;&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;把implements某一接口的类创建的对象的引用赋给该接口声明的接口变量
    
    </summary>
    
      <category term="JAVA" scheme="https://utihbi.github.io/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="https://utihbi.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>UML之面向对象处理</title>
    <link href="https://utihbi.github.io/2016/07/20/UML%E4%B9%8B%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%A4%84%E7%90%86/"/>
    <id>https://utihbi.github.io/2016/07/20/UML之面向对象处理/</id>
    <published>2016-07-20T03:03:06.000Z</published>
    <updated>2016-07-20T03:43:15.855Z</updated>
    
    <content type="html">&lt;h1 id=&quot;名词解释&quot;&gt;&lt;a href=&quot;#名词解释&quot; class=&quot;headerlink&quot; title=&quot;名词解释&quot;&gt;&lt;/a&gt;名词解释&lt;/h1&gt;&lt;p&gt;RUP(Rational Unifined Process)统一过程。&lt;br&gt;XP(Extreme programming)极限编程&lt;/p&gt;
&lt;p&gt;UML 是 语言；类比于音乐理论&lt;br&gt;RUP 是 方法；类比于五线谱&lt;/p&gt;
&lt;p&gt;RUP&amp;lt;-&amp;gt;XP&lt;/p&gt;
&lt;h1 id=&quot;面向对象处理&quot;&gt;&lt;a href=&quot;#面向对象处理&quot; class=&quot;headerlink&quot; title=&quot;面向对象处理&quot;&gt;&lt;/a&gt;面向对象处理&lt;/h1&gt;&lt;p&gt;不要决定通盘去考虑，而是找出问题领域包含的抽象角度。&lt;/p&gt;
&lt;h2 id=&quot;建模基础&quot;&gt;&lt;a href=&quot;#建模基础&quot; class=&quot;headerlink&quot; title=&quot;建模基础&quot;&gt;&lt;/a&gt;建模基础&lt;/h2&gt;&lt;p&gt;建模：抽象角度很重要&lt;br&gt;具体讲：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1、做需求时，首要目标：是业务有多少参与者，每个参与者目标是什么(抽象角度)？-&amp;gt;用例！
                      不是弄清楚业务是如何一步步完成的。 

2、目标确立后，找出能够满足这个目标的事物。有趣的问题：我们找这些事物的过程不是面向对象的，而是过程化的。
这是因为要达到一个目标，肯定是有 动作 附加在 静态事物 上，并产生了一定的 效果。（过程化）故我们要知道是 谁  发出了 动
作，作用于什么 事物，产生了怎样的 后果。

最终目的：找出场景当中贡献于场景目标的 事物，以及它们是如何贡献于这个场景的。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;总结：&lt;br&gt;        一个由抽象角度确定了的目标需要由静态事物加上特定的条件下产生的一个特定的场景来完成，&lt;br&gt;        即：&lt;br&gt;        静态的事物(物) + 特定的条件(规则) + 特定的动作(参与者的驱动) = 特定的场景(事件)&lt;/p&gt;
&lt;p&gt;&lt;font color=&quot;red&quot;&gt;&lt;br&gt;&lt;strong&gt;建模公式：&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;问题领域 = ∑ (抽象角度)
抽象角度 = 问题领域边界之外的参与者的业务目标 = 业务用例
业务用例 = ∑ (特定场景)
特定场景 = 静态的事物 + 特定的条件 + 特定的动作 or
特定的事 = 特定的事物 + 特定的规则 + 特定的人的行为
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;h2 id=&quot;用例驱动&quot;&gt;&lt;a href=&quot;#用例驱动&quot; class=&quot;headerlink&quot; title=&quot;用例驱动&quot;&gt;&lt;/a&gt;用例驱动&lt;/h2&gt;&lt;h3 id=&quot;逻辑视图：&quot;&gt;&lt;a href=&quot;#逻辑视图：&quot; class=&quot;headerlink&quot; title=&quot;逻辑视图：&quot;&gt;&lt;/a&gt;逻辑视图：&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;system只有一个逻辑视图，以图形方式说明关键的用例实现、子系统、包和类。
      简言之,建模公式中的&amp;quot;人&amp;quot;、&amp;quot;事&amp;quot;、&amp;quot;物&amp;quot;、&amp;quot;规则&amp;quot;是如何 分类组织 的。
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;进程-分析设计-视图：&quot;&gt;&lt;a href=&quot;#进程-分析设计-视图：&quot; class=&quot;headerlink&quot; title=&quot;进程(分析设计)视图：&quot;&gt;&lt;/a&gt;进程(分析设计)视图：&lt;/h3&gt;&lt;p&gt;system只有一个进程视图，以图形方式说明系统中进程的详细组织结构，包括类和子系统到进程和线程的映射。&lt;br&gt;            简言之，建模公式中的那些”人”、”事”、”物”、”规则”是如何 交互 的。&lt;/p&gt;
&lt;h3 id=&quot;部署视图：&quot;&gt;&lt;a href=&quot;#部署视图：&quot; class=&quot;headerlink&quot; title=&quot;部署视图：&quot;&gt;&lt;/a&gt;部署视图：&lt;/h3&gt;&lt;p&gt;system只有一个部署视图，以图形方式说明了处理活动在系统中各节点的分布，包括进程和线程的物理分布。&lt;br&gt;          简言之，建模公式中的那些”人”、”事”、”物”、”规则”是如何部署在物理(主机、网络环境)节点上的。&lt;/p&gt;
&lt;h3 id=&quot;实施视图：&quot;&gt;&lt;a href=&quot;#实施视图：&quot; class=&quot;headerlink&quot; title=&quot;实施视图：&quot;&gt;&lt;/a&gt;实施视图：&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;$列举实施模型中的所有子系统；
$描述子系统如何组织为层次和分层结构的构件图；
$描述子系统间导入依赖关系的图解。
简言之，建模公式中的那些&amp;quot;人&amp;quot;、&amp;quot;事&amp;quot;、&amp;quot;物&amp;quot;、&amp;quot;规则&amp;quot;是如何构成系统的“零部件”，我们如何组织人力生产和组装这些零部件。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;参考资料：《Tinking in UML》(大象书)&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;名词解释&quot;&gt;&lt;a href=&quot;#名词解释&quot; class=&quot;headerlink&quot; title=&quot;名词解释&quot;&gt;&lt;/a&gt;名词解释&lt;/h1&gt;&lt;p&gt;RUP(Rational Unifined Process)统一过程。&lt;br&gt;XP(Extreme programming)
    
    </summary>
    
      <category term="UML" scheme="https://utihbi.github.io/categories/UML/"/>
    
    
      <category term="UML" scheme="https://utihbi.github.io/tags/UML/"/>
    
  </entry>
  
  <entry>
    <title>细说UML核心元素</title>
    <link href="https://utihbi.github.io/2016/07/20/%E7%BB%86%E8%AF%B4UML%E6%A0%B8%E5%BF%83%E5%85%83%E7%B4%A0/"/>
    <id>https://utihbi.github.io/2016/07/20/细说UML核心元素/</id>
    <published>2016-07-20T01:48:06.000Z</published>
    <updated>2016-07-20T03:36:37.687Z</updated>
    
    <content type="html">&lt;h2 id=&quot;基本知识&quot;&gt;&lt;a href=&quot;#基本知识&quot; class=&quot;headerlink&quot; title=&quot;基本知识&quot;&gt;&lt;/a&gt;基本知识&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;功能性需求、非功能性需求&lt;/p&gt;
&lt;p&gt;功能性需求：一定有参与者(主角)&lt;br&gt;非功能性需求：找不到参与者&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;涉众、参与者、用户&lt;/p&gt;
&lt;p&gt;涉众：与要建设的这个系统有利益相关的一切人和事。&lt;/p&gt;
&lt;p&gt;参与者是涉众的代表，用户是参与者的代表；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;角色：&lt;/p&gt;
&lt;p&gt;参与者的职责，从众多参与者职责中抽象出相同的那部分，将其命名。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;用例&quot;&gt;&lt;a href=&quot;#用例&quot; class=&quot;headerlink&quot; title=&quot;用例&quot;&gt;&lt;/a&gt;用例&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;特征：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;相对独立，即不需要与其他用例交互而独自完成参与者的目的；
执行结果对参与者来说有意义，可观测。Eg：登陆系统&amp;lt;-&amp;gt;填写密码;
参与者发起；
动宾短语；
一个用例就是一个需求单、分析单元、设计单元、开发单元、测试单元、部署单元。【用例驱动】
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;粒度：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;业务建模阶段：可以说明一件完整的 事情 为宜；
用例分析阶段(概念建模阶段)：可以描述一个完整的 事件流 为宜。
                        简言之，可以描述一个完整业务中的一个 步骤；
系统建模阶段：因视角是针对计算机的，故能够描述操作者与计算机的一次交互为宜；
              简言之，一个操作界面或一个页面流。
&lt;/code&gt;&lt;/pre&gt;&lt;font color=&quot;red&quot;&gt;                      &lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;用例和功能区别：&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;用例：从人的角度；面向对象

功能：从计算机角度；面向过程；其描述缺乏上下文环境，一些功能根本没有人会用到；

对于不存在的事物，我们无法从结构和功能上描述，只能用使用者的观点来描述；
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;总结：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能是脱离使用者愿望而存在的；

功能是孤立的，给一个输入，通过计算就有一固定的输出；用例是系统性的工作，即谁在什么情况下通过什么方式做什么，
结果(愿望)是什么；

用例可以看成是 一系列功能组合来完成一个特定的目标，针对不同场景，组合方式不同。

Eg：电视
          功能：能开关，能显示，能调频道，调声音；
          用例：我要看电视节目，要完成这个愿望：
                                          1、开电视；
                                          2、调频道；
                                          3、声音不合适，可以调声音；
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;业务用例：&quot;&gt;&lt;a href=&quot;#业务用例：&quot; class=&quot;headerlink&quot; title=&quot;业务用例：&quot;&gt;&lt;/a&gt;业务用例：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;用于需求阶段的业务建模。(客户业务视角)&lt;h3 id=&quot;业务用例实现-业务用例实例-：&quot;&gt;&lt;a href=&quot;#业务用例实现-业务用例实例-：&quot; class=&quot;headerlink&quot; title=&quot;业务用例实现(业务用例实例)：&quot;&gt;&lt;/a&gt;业务用例实现(业务用例实例)：&lt;/h3&gt;&lt;/li&gt;
&lt;li&gt;业务用例的一种实现方式。 类比于编程中类和接口的关系，同一个接口可以有多个实现类。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;概念用例：&quot;&gt;&lt;a href=&quot;#概念用例：&quot; class=&quot;headerlink&quot; title=&quot;概念用例：&quot;&gt;&lt;/a&gt;概念用例：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;概念用例用来获取业务用例中的核心业务逻辑。&lt;/li&gt;
&lt;li&gt;概念用例是业务用例到系统用例（即我们天天挂在嘴边的用例）过渡时非常重要的指导。&lt;h3 id=&quot;系统-用例：&quot;&gt;&lt;a href=&quot;#系统-用例：&quot; class=&quot;headerlink&quot; title=&quot;[系统]用例：&quot;&gt;&lt;/a&gt;[系统]用例：&lt;/h3&gt;&lt;/li&gt;
&lt;li&gt;即我们天天挂在嘴边的用例;&lt;/li&gt;
&lt;li&gt;用来定义系统范围，获取功能需求的；&lt;/li&gt;
&lt;li&gt;简言之，软件系统开发的全部范围，我们得到的最终需求。(系统视角)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;系统-用例实现：&quot;&gt;&lt;a href=&quot;#系统-用例实现：&quot; class=&quot;headerlink&quot; title=&quot;[系统]用例实现：&quot;&gt;&lt;/a&gt;[系统]用例实现：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;参照上面“业务用例实现”&lt;/li&gt;
&lt;li&gt;连接起用例模型和系统实现之间的桥梁。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;业务实体&quot;&gt;&lt;a href=&quot;#业务实体&quot; class=&quot;headerlink&quot; title=&quot;业务实体&quot;&gt;&lt;/a&gt;业务实体&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;来自现实世界的；&lt;/li&gt;
&lt;li&gt;业务用例场景中使用的事物；&lt;/li&gt;
&lt;li&gt;类的版型，具有对象所有性质。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;业务实体属性：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;面向对象方法中抽象视角的体现
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;业务实体方法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;面向对象方法中抽象视角的体现，
简言之，属性，方法很多，我们只关心特殊场景(用例)下与这个场景直接关联的属性和方法。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;font color=&quot;red&quot;&gt;&lt;br&gt;&lt;strong&gt;简言之，参与者代表人，用例代表事，业务实例代表物；&lt;/strong&gt;&lt;br&gt;&lt;/font&gt;&lt;/p&gt;
&lt;h2 id=&quot;包&quot;&gt;&lt;a href=&quot;#包&quot; class=&quot;headerlink&quot; title=&quot;包&quot;&gt;&lt;/a&gt;包&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;一种容器，如文件夹，将信息分类，形成逻辑单元。&lt;/li&gt;
&lt;li&gt;可以容纳任何UML元素；&lt;br&gt;Eg:用例、业务实体、类图、子包；&lt;/li&gt;
&lt;li&gt;&lt;p&gt;分包的好(高内聚低耦合)坏(双向依赖和循环依赖)评判标准是包之间的依赖关系；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;包之间的关系也只有依赖关系；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;领域包&quot;&gt;&lt;a href=&quot;#领域包&quot; class=&quot;headerlink&quot; title=&quot;领域包&quot;&gt;&lt;/a&gt;领域包&lt;/h3&gt;&lt;p&gt;分类业务领域内的业务单元，每个包代表一个领域&lt;/p&gt;
&lt;h3 id=&quot;子系统&quot;&gt;&lt;a href=&quot;#子系统&quot; class=&quot;headerlink&quot; title=&quot;子系统&quot;&gt;&lt;/a&gt;子系统&lt;/h3&gt;&lt;p&gt;分类系统内逻辑对象并形成子系统&lt;/p&gt;
&lt;h3 id=&quot;组织结构&quot;&gt;&lt;a href=&quot;#组织结构&quot; class=&quot;headerlink&quot; title=&quot;组织结构&quot;&gt;&lt;/a&gt;组织结构&lt;/h3&gt;&lt;p&gt;分类业务领域中组织结构&lt;/p&gt;
&lt;h3 id=&quot;层&quot;&gt;&lt;a href=&quot;#层&quot; class=&quot;headerlink&quot; title=&quot;层&quot;&gt;&lt;/a&gt;层&lt;/h3&gt;&lt;p&gt;分类软件中的层次&lt;/p&gt;
&lt;h2 id=&quot;分析类-架构角度&quot;&gt;&lt;a href=&quot;#分析类-架构角度&quot; class=&quot;headerlink&quot; title=&quot;分析类(架构角度)&quot;&gt;&lt;/a&gt;分析类(架构角度)&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;分析类代表系统中主要“职责簇”。简言之，是从功能性需求向计算机实现转化过程中的“第一个关口“&lt;/li&gt;
&lt;li&gt;可以产生系统的设计类和子系统。简言之，系统可以通过某种途径“产生出来”，不是拍脑袋拍出来的。&lt;/li&gt;
&lt;li&gt;简言之，跨越需求阶段到设计实现的桥梁。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;高于设计实现：&lt;br&gt;不理会复杂的设计要求，Eg:设计模式、框架；&lt;/li&gt;
&lt;li&gt;高于语言实现：&lt;br&gt;不理会编程语言；&lt;/li&gt;
&lt;li&gt;高于实现方式：&lt;br&gt;不理会具体实现方式，Eg:安全认证，实现方式有：LDAP,CA,JAAC等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;边界类&quot;&gt;&lt;a href=&quot;#边界类&quot; class=&quot;headerlink&quot; title=&quot;边界类&quot;&gt;&lt;/a&gt;边界类&lt;/h3&gt;&lt;p&gt;用于展现层(架构角度)&lt;/p&gt;
&lt;h3 id=&quot;控制类&quot;&gt;&lt;a href=&quot;#控制类&quot; class=&quot;headerlink&quot; title=&quot;控制类&quot;&gt;&lt;/a&gt;控制类&lt;/h3&gt;&lt;p&gt;用于业务逻辑层(架构角度)&lt;/p&gt;
&lt;h3 id=&quot;实体类&quot;&gt;&lt;a href=&quot;#实体类&quot; class=&quot;headerlink&quot; title=&quot;实体类&quot;&gt;&lt;/a&gt;实体类&lt;/h3&gt;&lt;p&gt;用于持久层(架构角度)&lt;/p&gt;
&lt;h2 id=&quot;设计类&quot;&gt;&lt;a href=&quot;#设计类&quot; class=&quot;headerlink&quot; title=&quot;设计类&quot;&gt;&lt;/a&gt;设计类&lt;/h2&gt;&lt;p&gt;对应的对象取决于编程语言；&lt;br&gt;简言之，就是编程语言中具体的类；&lt;/p&gt;
&lt;h2 id=&quot;关系&quot;&gt;&lt;a href=&quot;#关系&quot; class=&quot;headerlink&quot; title=&quot;关系&quot;&gt;&lt;/a&gt;关系&lt;/h2&gt;&lt;h3 id=&quot;关联&quot;&gt;&lt;a href=&quot;#关联&quot; class=&quot;headerlink&quot; title=&quot;关联&quot;&gt;&lt;/a&gt;关联&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;静态关系，由“常识”、“规则”、“法律”等因素决定&lt;/li&gt;
&lt;li&gt;A————————B，双方都知道对方的存在&lt;/li&gt;
&lt;li&gt;特别的，用例模型中，参与者——&amp;gt;用例&lt;/li&gt;
&lt;li&gt;体现在代码里：实例变量(成员变量)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;依赖&quot;&gt;&lt;a href=&quot;#依赖&quot; class=&quot;headerlink&quot; title=&quot;依赖&quot;&gt;&lt;/a&gt;依赖&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;临时，动态关系&lt;/li&gt;
&lt;li&gt;A- - - - -&amp;gt;B  (A依赖于B)&lt;/li&gt;
&lt;li&gt;体现在代码里：类构造方法、类方法等的传入参数；&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;扩展&quot;&gt;&lt;a href=&quot;#扩展&quot; class=&quot;headerlink&quot; title=&quot;扩展&quot;&gt;&lt;/a&gt;扩展&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;&amp;lt;extend&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;A– – – – – – – - -&amp;gt;B  ( A扩展出B)&lt;/li&gt;
&lt;li&gt;用于在用例中项目基本用例中的某个扩展点插入扩展用例；&lt;/li&gt;
&lt;li&gt;可选；&lt;/li&gt;
&lt;li&gt;特定条件下发生；&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;包含&quot;&gt;&lt;a href=&quot;#包含&quot; class=&quot;headerlink&quot; title=&quot;包含&quot;&gt;&lt;/a&gt;包含&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;&amp;lt;include&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;A– – — – – – – -&amp;gt;B  ( A包含B)&lt;/li&gt;
&lt;li&gt;分解出两个或更多个用例共有的行为。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;扩展，包含区别：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;* 扩展“可选”，包含“必须”；
* 没有扩展用例，基本用例完整；
* 没有包含用例，基本用例不完整；
* 没有基本用例，扩展用例和包含用例均不能单独存在；
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;实现&quot;&gt;&lt;a href=&quot;#实现&quot; class=&quot;headerlink&quot; title=&quot;实现&quot;&gt;&lt;/a&gt;实现&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;A– – – – – –▷B (A实现B)&lt;/li&gt;
&lt;li&gt;用例和用例实现间用这种关系；&lt;br&gt;&lt;img src=&quot;http://oald9ve1g.bkt.clouddn.com/hexo/img/relizeRelationUml.png&quot; alt=&quot;&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;精化&quot;&gt;&lt;a href=&quot;#精化&quot; class=&quot;headerlink&quot; title=&quot;精化&quot;&gt;&lt;/a&gt;精化&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;&amp;lt;refine&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;A– – – – – – – –&amp;gt;B  ( A精化了B)&lt;/li&gt;
&lt;li&gt;设计类精化了分析类&lt;/li&gt;
&lt;li&gt;基本用例可以分解出许多更小的关键精化用例，这些精化用例更细致展现了基本用例的核心业务；&lt;br&gt;&lt;img src=&quot;http://oald9ve1g.bkt.clouddn.com/hexo/img/refineRelationUml.png&quot; alt=&quot;&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;泛化&quot;&gt;&lt;a href=&quot;#泛化&quot; class=&quot;headerlink&quot; title=&quot;泛化&quot;&gt;&lt;/a&gt;泛化&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;A————————▷B  ( A继承了B)&lt;/li&gt;
&lt;li&gt;建模过程中任意阶段均可使用；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;精化、泛化区别：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;* 精化表示由基本对象可以分解为更精确、精细的对象，这些子对象没有增加、减少、改变基本对象的行为和属性，只是更加细致和
明确了；

* 泛化表示由基本对象泛化的子对象继承了基本对象的所有特征，且可以增加、改变基本对象的行为和属性；
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;聚合&quot;&gt;&lt;a href=&quot;#聚合&quot; class=&quot;headerlink&quot; title=&quot;聚合&quot;&gt;&lt;/a&gt;聚合&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;A————————♢B  ( A聚合到B,B由A组成)&lt;/li&gt;
&lt;li&gt;用于类图，特别表示实体对象间关系；&lt;/li&gt;
&lt;li&gt;表达整体由部分构成&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;组合&quot;&gt;&lt;a href=&quot;#组合&quot; class=&quot;headerlink&quot; title=&quot;组合&quot;&gt;&lt;/a&gt;组合&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;A————————♦B  ( A组合成B，B由A构成)&lt;/li&gt;
&lt;li&gt;用于类图，特别表示实体对象间关系；&lt;/li&gt;
&lt;li&gt;表达整体拥有部分&lt;/li&gt;
&lt;li&gt;特别强调：Rose中用   &amp;lt;——————◇   表示；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;聚合、组合区别：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;* 聚合：整体部分 “弱依赖”，整体不存在了，部分仍然存在；Eg:部门撤销后，人员依然存在；
* 组合，整体部分 “强依赖”，整体不存在了，部分将消亡  ；Eg:母公司解体，子公司也破产；
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;组件&quot;&gt;&lt;a href=&quot;#组件&quot; class=&quot;headerlink&quot; title=&quot;组件&quot;&gt;&lt;/a&gt;组件&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;组件是系统中实际存在可更换的部分，它实现特定的功能，符合一套接口标准并实现一组接口;&lt;/li&gt;
&lt;li&gt;代表系统中一部分物理实施，包括软件代码(源代码、二进制代码)或其等价物(脚本或命令文件);&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;特征&quot;&gt;&lt;a href=&quot;#特征&quot; class=&quot;headerlink&quot; title=&quot;特征&quot;&gt;&lt;/a&gt;特征&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;完备性&lt;/p&gt;
&lt;p&gt;  包含的一些类和接口，一个组件能独立完成一项特定的业务目标；&lt;br&gt;  从调用者观点出发：不需调用多个组件来完成一个业务请求；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;独立性&lt;/p&gt;
&lt;p&gt;  组件间是松耦合的；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;逻辑性&lt;/p&gt;
&lt;p&gt;  从软件构件设计的观点来定义的，并非从需求中可直接导出；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;透明性&lt;/p&gt;
&lt;p&gt;  组件的修改应当涉及组件的定义以及组件中包含类的重新指定，而不应该导致类的修改；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;节点&quot;&gt;&lt;a href=&quot;#节点&quot; class=&quot;headerlink&quot; title=&quot;节点&quot;&gt;&lt;/a&gt;节点&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;至少有一个处理器、内存以及可能还带有其他设备的处理元素；&lt;/li&gt;
&lt;li&gt;实际生活中，服务器、工作站、客户机都可以作为节点；&lt;/li&gt;
&lt;li&gt;应用于部署视图&lt;/li&gt;
&lt;li&gt;应用：分布式应用环境、多设备应用环境&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考资料：《Tinking in UML》(大象书)&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;基本知识&quot;&gt;&lt;a href=&quot;#基本知识&quot; class=&quot;headerlink&quot; title=&quot;基本知识&quot;&gt;&lt;/a&gt;基本知识&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;功能性需求、非功能性需求&lt;/p&gt;
&lt;p&gt;功能性需求：一定有参与者(主角)&lt;br&gt;非功能性需求：找不到参与者
    
    </summary>
    
      <category term="UML" scheme="https://utihbi.github.io/categories/UML/"/>
    
    
      <category term="UML" scheme="https://utihbi.github.io/tags/UML/"/>
    
  </entry>
  
  <entry>
    <title>插入排序</title>
    <link href="https://utihbi.github.io/2016/07/18/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/"/>
    <id>https://utihbi.github.io/2016/07/18/插入排序/</id>
    <published>2016-07-18T09:40:19.180Z</published>
    <updated>2016-07-18T09:58:38.858Z</updated>
    
    <content type="html">&lt;h3 id=&quot;插入排序&quot;&gt;&lt;a href=&quot;#插入排序&quot; class=&quot;headerlink&quot; title=&quot;插入排序&quot;&gt;&lt;/a&gt;插入排序&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;思想&lt;/strong&gt;：一堆数据，前面部分有序，后面无序；遍历无序的这部分数据，并在前面有序数据中寻找合适的位置插入，并将插入点后的数据后移，使插入后的前面数据仍然有序；&lt;br&gt;应用场景：适用于少量数据排序，是&lt;font color=&quot;red&quot;&gt;原址排序&lt;/font&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;原址排序：如果排序数组中仅有常数个元素需要在排序过程中存储在数组之外，则称排序算法是原址的。除了插入排序 ，还有堆排序和快排。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;直接插入排序&lt;/li&gt;
&lt;li&gt;折半插入排序&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;情景     时间复杂度&lt;br&gt;  理想     O(n)&lt;br&gt;  最坏     O(n^2)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;50&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;51&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;52&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;53&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//java code&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;insertSort&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] array)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	   &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; len = array.length;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	   &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	   &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; ;j&amp;lt;len;j++)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		   &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; key = array[j];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		   &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = j-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		   &lt;span class=&quot;comment&quot;&gt;//比较一个，移动一个&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		   &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;( i &amp;gt;=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; key&amp;lt;array[i])&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			   &lt;span class=&quot;comment&quot;&gt;// key&amp;lt;array[i] &amp;amp;&amp;amp; i &amp;gt;=0  数组会越界抛异常&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			   array[i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] = array[i--];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		   &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		   &lt;span class=&quot;comment&quot;&gt;//插入（当一个for或while循环按通常的方式[即由于循环头中的测试]退出时，执行测试的次数比执行循环体的次数多1，故插入点为array[i+1]）&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		   array[i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] = key;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	   &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	   &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//比较次数减少，移动次数不变&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;binaryInsertSort&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] array)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	   &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; len = array.length;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	   &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	   &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; ; j&amp;lt;len; j++)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		   &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; key = array[j];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		   &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = j-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		   &lt;span class=&quot;comment&quot;&gt;//location 是 key 刚好 &amp;gt;= value的地方&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		   &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; location = binarySearch(array,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,i,key);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		   &lt;span class=&quot;comment&quot;&gt;//通过二分查找找到插入点，将插入点后数据整体移动；&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		   &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(;i&amp;gt;=location;i--)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			   array[i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] = array[i];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		   &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		   &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		   array[i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] = key;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	   &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	   &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;binarySearch&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] array,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; start,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; end,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; obj)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; left = start;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; right = end;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; mid = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(left &amp;lt;= right)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   	    mid = (left + right )/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   	   &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(obj &amp;gt;= array[mid])&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            left = mid + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            right = mid - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; left;&lt;span class=&quot;comment&quot;&gt;//注意返回left，寻找的&amp;lt;=obj的位置；&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;插入排序&quot;&gt;&lt;a href=&quot;#插入排序&quot; class=&quot;headerlink&quot; title=&quot;插入排序&quot;&gt;&lt;/a&gt;插入排序&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;思想&lt;/strong&gt;：一堆数据，前面部分有序，后面无序；遍历无序的这部分数据，并在前面有序数据中寻找合适的
    
    </summary>
    
      <category term="算法" scheme="https://utihbi.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="排序" scheme="https://utihbi.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 总结</title>
    <link href="https://utihbi.github.io/2016/07/17/Hello-Hexo/"/>
    <id>https://utihbi.github.io/2016/07/17/Hello-Hexo/</id>
    <published>2016-07-17T01:43:06.000Z</published>
    <updated>2016-07-17T07:57:28.049Z</updated>
    
    <content type="html">&lt;p&gt;Hello,world ! Hello Hexo !&lt;/p&gt;
&lt;p&gt;最近生活状态：&lt;br&gt;辞职大半个月了，论文也没写一个字；&lt;br&gt;整日闲逛各种论坛，社区，有时还要喝点鸡汤；&lt;br&gt;如此颓废，心有不甘，遂决定搭建个人博客，聊以慰藉；&lt;/p&gt;
&lt;p&gt;搭建步骤网上很多，这里就不细说了。&lt;br&gt;我主要参考了&lt;a href=&quot;http://tengj.top/tags/hexo/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;嘟爷&lt;/a&gt;的博客，在这里特别感谢嘟爷。&lt;/p&gt;
&lt;p&gt;说下遇到的问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安装git时，由于本人选择了windows console，所以后面在 Git bash中运行类似npm的命令时执行失败。解决：干脆就不用Git bash了，把Git的环境变量配置好，直接在dos里玩就好了。&lt;/li&gt;
&lt;li&gt;配置ssh时，找不到路径（os:windows），配置失败。解决：手动设置路径即可(/usr/.ssh/id_rsa)。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ ssh-keygen -t rsa -C &amp;quot;yourMail@qq.com&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Generating public/private rsa key pair.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Enter file in which to save the key (%HOMEDRIVE%%HOMEPATH%/.ssh/id_rsa): /usr/.ssh/id_rsa&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Enter passphrase (empty for no passphrase):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Enter same passphrase again:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Your identification has been saved in /usr/.ssh/id_rsa.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Your public key has been saved in /usr/.ssh/id_rsa.pub.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;The key fingerprint is:&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;往github发布时即&lt;code&gt;hexo d&lt;/code&gt; 会出现发布失败。由于账号密码会出现连接超时导致，解决：重试几次即可。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;好了，总的来说，搭建这个博客还算顺利，没有遇到太多的bug。接下来就按照自己风格整理博客吧。&lt;/p&gt;
&lt;p&gt;疯了半个月了，自己也该收心写论文了。祝自己论文撰写顺利吧。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Hello,world ! Hello Hexo !&lt;/p&gt;
&lt;p&gt;最近生活状态：&lt;br&gt;辞职大半个月了，论文也没写一个字；&lt;br&gt;整日闲逛各种论坛，社区，有时还要喝点鸡汤；&lt;br&gt;如此颓废，心有不甘，遂决定搭建个人博客，聊以慰藉；&lt;/p&gt;
&lt;p&gt;搭建步骤网上很多，这里就不
    
    </summary>
    
      <category term="hexo" scheme="https://utihbi.github.io/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://utihbi.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hello Hexo</title>
    <link href="https://utihbi.github.io/2016/07/17/hello-world/"/>
    <id>https://utihbi.github.io/2016/07/17/hello-world/</id>
    <published>2016-07-17T00:10:32.994Z</published>
    <updated>2016-07-17T08:32:57.608Z</updated>
    
    <content type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Run-server&quot;&gt;&lt;a href=&quot;#Run-server&quot; class=&quot;headerlink&quot; title=&quot;Run server&quot;&gt;&lt;/a&gt;Run server&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ hexo server&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/server.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Server&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Generate-static-files&quot;&gt;&lt;a href=&quot;#Generate-static-files&quot; class=&quot;headerlink&quot; title=&quot;Generate static files&quot;&gt;&lt;/a&gt;Generate static files&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ hexo generate&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/generating.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Generating&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Deploy-to-remote-sites&quot;&gt;&lt;a href=&quot;#Deploy-to-remote-sites&quot; class=&quot;headerlink&quot; title=&quot;Deploy to remote sites&quot;&gt;&lt;/a&gt;Deploy to remote sites&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ hexo deploy&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/deployment.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Deployment&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
      <category term="hexo" scheme="https://utihbi.github.io/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://utihbi.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
