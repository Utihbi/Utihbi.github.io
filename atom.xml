<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>菜鸟生活</title>
  <subtitle>菜鸟也有梦想！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://utihbi.github.io/"/>
  <updated>2016-08-29T08:51:50.863Z</updated>
  <id>https://utihbi.github.io/</id>
  
  <author>
    <name>Emerson</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Memory Leaks</title>
    <link href="https://utihbi.github.io/2016/08/29/Memory%20Leak/"/>
    <id>https://utihbi.github.io/2016/08/29/Memory Leak/</id>
    <published>2016-08-29T08:38:21.000Z</published>
    <updated>2016-08-29T08:51:50.863Z</updated>
    
    <content type="html">&lt;h2 id=&quot;什么是内存泄露？&quot;&gt;&lt;a href=&quot;#什么是内存泄露？&quot; class=&quot;headerlink&quot; title=&quot;什么是内存泄露？&quot;&gt;&lt;/a&gt;什么是内存泄露？&lt;/h2&gt;&lt;p&gt;一些对象不再被应用程序使用了，但是GC却不能回收它们，因为还有引用指向它们。&lt;/p&gt;
&lt;h2 id=&quot;为啥会发生？&quot;&gt;&lt;a href=&quot;#为啥会发生？&quot; class=&quot;headerlink&quot; title=&quot;为啥会发生？&quot;&gt;&lt;/a&gt;为啥会发生？&lt;/h2&gt;&lt;p&gt;当生命周期长的对象(假设叫A)持有一个生命周期短的对象(假设叫B)引用，B没有用时却不能被及时销毁。&lt;/p&gt;
&lt;h2 id=&quot;如何避免？&quot;&gt;&lt;a href=&quot;#如何避免？&quot; class=&quot;headerlink&quot; title=&quot;如何避免？&quot;&gt;&lt;/a&gt;如何避免？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;注意集合类的使用：HashMap, ArrayList等。当它们被申明为static时，它们的生命周期和应用程序一样长。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;注意事件监听和回调。当监听器被注册后，没有用时却没有注销监听器，导致监听器一直存在。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;类自己管理内存时，编程者要有内存泄露意识。一个对象的成员变量指向其他对象的引用要置null。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是内存泄露？&quot;&gt;&lt;a href=&quot;#什么是内存泄露？&quot; class=&quot;headerlink&quot; title=&quot;什么是内存泄露？&quot;&gt;&lt;/a&gt;什么是内存泄露？&lt;/h2&gt;&lt;p&gt;一些对象不再被应用程序使用了，但是GC却不能回收它们，因为还有引用指向它们。&lt;/p&gt;
&lt;h2
    
    </summary>
    
      <category term="JAVA" scheme="https://utihbi.github.io/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="https://utihbi.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>HashTable vs HashMap vs TreeMap</title>
    <link href="https://utihbi.github.io/2016/08/29/HashTable%20vs%20HashMap%20vs%20TreeMap/"/>
    <id>https://utihbi.github.io/2016/08/29/HashTable vs HashMap vs TreeMap/</id>
    <published>2016-08-29T07:16:53.000Z</published>
    <updated>2016-08-29T07:28:55.065Z</updated>
    
    <content type="html">&lt;pre&gt;&lt;code&gt;HashMap | HashTable | TreeMap
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;顺序         no        |    no        |    yes&lt;br&gt;null(k-v)   yes-yes    |    no-no    |    no—yes&lt;br&gt;同步        no        |    yes        |    no&lt;br&gt;效率        O(1)    |    O(1)    |    O(lgN)&lt;br&gt;实现方式    buckets    |    buckets    |    红黑树&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;HashMap | HashTable | TreeMap
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;顺序         no        |    no        |    yes&lt;br&gt;null(k-v)   yes-yes    |    no-no  
    
    </summary>
    
      <category term="JAVA" scheme="https://utihbi.github.io/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="https://utihbi.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>怎样初始化得到一不可变map？</title>
    <link href="https://utihbi.github.io/2016/08/29/How%20to%20initialize%20a%20staticimmutable%20Map/"/>
    <id>https://utihbi.github.io/2016/08/29/How to initialize a staticimmutable Map/</id>
    <published>2016-08-29T03:25:34.000Z</published>
    <updated>2016-08-29T07:08:12.793Z</updated>
    
    <content type="html">&lt;p&gt;初始化一个不可变map，我们常常的做法是用修饰符“static final”；如下代码所示,&lt;br&gt;然而事实是初始化过后，我们人然可以继续操作该map，比如&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;所以，这样的方法并没有真正的达到我们的要求。&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;//code 1&lt;br&gt;public class Test {&lt;br&gt;    private static final Map map;&lt;br&gt;    static {&lt;br&gt;        map = new HashMap();&lt;br&gt;        map.put(1, “one”);&lt;br&gt;        map.put(2, “two”);&lt;br&gt;    }&lt;br&gt;}&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;下面的代码在初始化最后用```Collections.unmodifiableMap()```来处理，如果此时试图添加元素会抛出&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;“UnsupportedOperationException”异常。&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;//code 2&lt;br&gt;public class Test {&lt;br&gt;    private static final Map map;&lt;br&gt;    static {&lt;br&gt;        Map aMap = new HashMap();&lt;br&gt;        aMap.put(1, “one”);&lt;br&gt;        aMap.put(2, “two”);&lt;br&gt;        map = Collections.unmodifiableMap(aMap);&lt;br&gt;    }&lt;br&gt;}&lt;br&gt;```&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;初始化一个不可变map，我们常常的做法是用修饰符“static final”；如下代码所示,&lt;br&gt;然而事实是初始化过后，我们人然可以继续操作该map，比如&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutte
    
    </summary>
    
      <category term="JAVA" scheme="https://utihbi.github.io/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="https://utihbi.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>questions of Java Strings</title>
    <link href="https://utihbi.github.io/2016/08/28/questions%20of%20Java%20Strings/"/>
    <id>https://utihbi.github.io/2016/08/28/questions of Java Strings/</id>
    <published>2016-08-28T09:25:30.000Z</published>
    <updated>2016-08-28T09:36:15.631Z</updated>
    
    <content type="html">&lt;ol&gt;
&lt;li&gt;Can we use string for switch statement?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Yes to version 7. From JDK 7, we can use string as switch condition. Before version 6, we can not use string as switch condition.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;// java 7 only!&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;switch (str.toLowerCase()) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      case &amp;quot;a&amp;quot;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           value = 1;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           break;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      case &amp;quot;b&amp;quot;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           value = 2;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           break;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;How to split a string with white space characters?&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;String[] strArray = aString.split(&amp;quot;\\s+&amp;quot;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What substring() method really does?&lt;br&gt;In JDK 6, the substring() method gives a window to an array of chars which represents the existing String, but do not create a new one. To create a new string represented by a new char array, you can do add an empty string like the following:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;str.substring(m, n) + &amp;quot;&amp;quot;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;This will create a new char array that represents the new string. The above approach sometimes can make your code faster, because Garbage Collector can collect the unused large string and keep only the sub string.&lt;/p&gt;
&lt;p&gt;In Oracle JDK 7, substring() creates a new char array, not uses the existing one. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;How to repeat a string?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;we can use the repeat() method of StringUtils from Apache Commons Lang package.&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;String str = &amp;quot;abcd&amp;quot;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;String repeated = StringUtils.repeat(str,3);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//abcdabcdabcd&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;How to convert string to date?&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;String str = &amp;quot;Sep 17, 2013&amp;quot;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Date date = new SimpleDateFormat(&amp;quot;MMMM d, yy&amp;quot;, Locale.ENGLISH).parse(str);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;System.out.println(date);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//Tue Sep 17 00:00:00 EDT 2013&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How to count # of occurrences of a character in a string?&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Use StringUtils from apache commons lang.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;int n = StringUtils.countMatches(&amp;quot;11112222&amp;quot;, &amp;quot;1&amp;quot;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;System.out.println(n);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;How to detect if a string contains only uppercase letter?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Use java.lang.Character&lt;br&gt;isUpperCase() and isLetter() ;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;Can we use string for switch statement?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Yes to version 7. From JDK 7, we can use string as switch condition. Before v
    
    </summary>
    
      <category term="JAVA" scheme="https://utihbi.github.io/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="https://utihbi.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Longest Palindromic Substring(LeetCode)</title>
    <link href="https://utihbi.github.io/2016/08/24/Longest%20Palindromic%20Substring(LeetCode)/"/>
    <id>https://utihbi.github.io/2016/08/24/Longest Palindromic Substring(LeetCode)/</id>
    <published>2016-08-24T08:38:34.000Z</published>
    <updated>2016-08-24T13:48:23.558Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Question-Longest-Palindromic-Substring&quot;&gt;&lt;a href=&quot;#Question-Longest-Palindromic-Substring&quot; class=&quot;headerlink&quot; title=&quot;Question:Longest Palindromic Substring&quot;&gt;&lt;/a&gt;Question:&lt;a href=&quot;https://leetcode.com/problems/longest-palindromic-substring/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Longest Palindromic Substring&lt;/a&gt;&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;Given a string S, find the longest palindromic substring(最长回文子串)in S. 

You may assume that the maximum length of S is 1000, and there exists one 

unique longest palindromic substring.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;br&gt;    Make sure you understand what a palindrome means. A palindrome is a string which reads the same in both directions. &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;For example, &amp;quot;aba&amp;quot; is a palindome, &amp;quot;abc&amp;quot; is not.
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;SourceCode&quot;&gt;&lt;a href=&quot;#SourceCode&quot; class=&quot;headerlink&quot; title=&quot;SourceCode:&quot;&gt;&lt;/a&gt;SourceCode:&lt;/h2&gt;&lt;h3 id=&quot;s1&quot;&gt;&lt;a href=&quot;#s1&quot; class=&quot;headerlink&quot; title=&quot;s1&quot;&gt;&lt;/a&gt;s1&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;50&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;51&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;52&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;53&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;54&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;55&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;56&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;57&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;58&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;59&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;60&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;61&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;62&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;63&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;64&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;65&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;66&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;67&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;68&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;69&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;70&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;71&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;72&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;73&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;74&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;//笔者提交版本；耗时：75ms；&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;public class Solution &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    public String longestPalindrome(String s) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        //1.边界控制&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        if(null == s || s.isEmpty())&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            return &amp;quot;&amp;quot;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        int len = s.length();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        if(1 == len)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            return s;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        //2.logic&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        //2.1 构造形如“#a#a#” 的字符串&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        int oriArrLen = len*2+1;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        StringBuilder oriArr = new StringBuilder(oriArrLen);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        for(int i = 0 ;i&amp;lt;len;i++)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            oriArr.append(&amp;apos;#&amp;apos;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            oriArr.append(s.charAt(i));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        oriArr.append(&amp;apos;#&amp;apos;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        //debug&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        //System.out.println(oriArr);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        int maxLen = 0;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        int start = 0,end = 0;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        //2.2从头开始遍历&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        for(int mid = 2;mid &amp;lt; oriArrLen; mid++)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            //debug&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            //System.out.println(&amp;quot;mid&amp;quot;+mid);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            int curLen = 1;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            int i=mid-1,j=mid+1;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            for(;i&amp;gt;=0&amp;amp;&amp;amp;j&amp;lt;oriArrLen;i--,j++)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                if(oriArr.charAt(i) == oriArr.charAt(j))&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    curLen += 2;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;#125;else&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    break;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            if(maxLen &amp;lt; curLen)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                maxLen = curLen;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                start = i+1;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                end = j-1;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        //debug&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        //System.out.println(start+&amp;quot; &amp;quot;+end);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        if(oriArr.charAt(start)==&amp;apos;#&amp;apos;)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            start++;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            end--;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        StringBuilder result = new StringBuilder(len);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        //debug&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        //System.out.println(start+&amp;quot; &amp;quot;+end);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        for(int i = start;i&amp;lt;=end;i +=2)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            result.append(oriArr.charAt(i));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        return result.toString();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;s2&quot;&gt;&lt;a href=&quot;#s2&quot; class=&quot;headerlink&quot; title=&quot;s2&quot;&gt;&lt;/a&gt;s2&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;50&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;51&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;52&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;53&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;54&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;55&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;56&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;57&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;58&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;59&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;60&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;61&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;62&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;63&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;64&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;65&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;66&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;67&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;68&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;69&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;70&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;71&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;72&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;73&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;74&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;75&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;76&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;77&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;78&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;79&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;80&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;81&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;82&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;83&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;84&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;85&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;86&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;87&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;88&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;89&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;//该版本参考了Solution,采用DP；耗时：104ms；&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/*&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;To improve over the brute force solution, we first observe how we can avoid unnecessary re-computation while validating palindromes. &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Consider the case &amp;apos;&amp;apos;ababa&amp;apos;&amp;apos;. If we already knew that &amp;apos;&amp;apos;bab&amp;apos;&amp;apos; is a palindrome, it is obvious that &amp;apos;&amp;apos;ababa&amp;apos;&amp;apos; must be a palindrome &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;since the two left and right end letters are the same.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;We define P(i,j)P(i,j) as following:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;P(i,j)= | true,if the substring Si…Sj is a palindrome&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	| false,otherwise.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;P(i,j)=&amp;#123;true,if the substring Si…Sj is a palindrome;false,otherwise. &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	Therefore,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	P(i, j) = ( P(i+1, j-1) &amp;amp;&amp;amp; S_i == S_j )&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;The base cases are:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	P(i, i) = true P(i,i)=true&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	P(i, i+1) = ( S_i == S_&amp;#123;i+1&amp;#125; ) &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;This yields a straight forward DP solution, which we first initialize the one and two letters palindromes, and work our way up finding all three letters palindromes, and so on...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Complexity Analysis&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Time complexity : O(n^2)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Space complexity : O(n^2)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;public class Solution &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    public String longestPalindrome(String s) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        //1.边界控制&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        if(null == s || s.isEmpty())&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            return &amp;quot;&amp;quot;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        int len = s.length();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        if(1 == len)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            return s;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        //2.logic&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        //[i][j]代表从字符串位置i到j是否满足条件&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        boolean[][] dpTab = new boolean[len][len];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		//2.1 表格初始化&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        //int max = 1;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        int start = 0,end =0;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        for(int i = 0 ;i&amp;lt;len;i++)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            dpTab[i][i] = true;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            if(i!=len-1)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                dpTab[i][i+1] = s.charAt(i) == s.charAt(i+1);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                if(dpTab[i][i+1])&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    //max = 2;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    start = i;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    end = i+1;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		//2.2 填写表格&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        //最长回文统计step为长度&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        for(int step=3 ; step &amp;lt;= len;step++)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            //i &amp;lt; len-step+1 注意边界&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            for(int i = 0;i &amp;lt; len-step+1;i++)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                int j = i+step-1;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                dpTab[i][j] = dpTab[i+1][j-1] &amp;amp;&amp;amp; (s.charAt(i) == s.charAt(j));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                if(dpTab[i][j])&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    //max = step;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    start = i;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    end = j;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        return s.substring(start,end+1);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Question-Longest-Palindromic-Substring&quot;&gt;&lt;a href=&quot;#Question-Longest-Palindromic-Substring&quot; class=&quot;headerlink&quot; title=&quot;Question:Longest
    
    </summary>
    
      <category term="LeetCode" scheme="https://utihbi.github.io/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="https://utihbi.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Longest Substring Without Repeating Characters(LeetCode)</title>
    <link href="https://utihbi.github.io/2016/08/22/Longest%20Substring%20Without%20Repeating%20Characters(LeetCode)/"/>
    <id>https://utihbi.github.io/2016/08/22/Longest Substring Without Repeating Characters(LeetCode)/</id>
    <published>2016-08-22T13:11:10.000Z</published>
    <updated>2016-08-24T13:50:19.187Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Question-Longest-Substring-Without-Repeating-Characters&quot;&gt;&lt;a href=&quot;#Question-Longest-Substring-Without-Repeating-Characters&quot; class=&quot;headerlink&quot; title=&quot;Question:Longest Substring Without Repeating Characters&quot;&gt;&lt;/a&gt;Question:&lt;a href=&quot;https://leetcode.com/problems/longest-substring-without-repeating-characters/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Longest Substring Without Repeating Characters&lt;/a&gt;&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;Given a string, find the length of the longest substring 

without repeating characters.

Examples:

Given &amp;quot;abcabcbb&amp;quot;, the answer is &amp;quot;abc&amp;quot;, which the length is 3.

Given &amp;quot;bbbbb&amp;quot;, the answer is &amp;quot;b&amp;quot;, with the length of 1.

Given &amp;quot;pwwkew&amp;quot;, the answer is &amp;quot;wke&amp;quot;, with the length of 3. Note that the answer must be a substring, 

&amp;quot;pwke&amp;quot; is a subsequence and not a substring.
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;SourceCode&quot;&gt;&lt;a href=&quot;#SourceCode&quot; class=&quot;headerlink&quot; title=&quot;SourceCode:&quot;&gt;&lt;/a&gt;SourceCode:&lt;/h2&gt;&lt;h3 id=&quot;s1&quot;&gt;&lt;a href=&quot;#s1&quot; class=&quot;headerlink&quot; title=&quot;s1&quot;&gt;&lt;/a&gt;s1&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;//笔者提交版本；耗时：14ms；&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;public class Solution &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    public int lengthOfLongestSubstring(String s) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        int len = 0;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        //边界控制&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        if(null == s||s.isEmpty()||&amp;quot;&amp;quot;.equals(s))&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            return len;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        if(1 == (len = s.length()))&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            return len;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        //可以走到这里说明最少有一个子串，用result存放最大长度&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        int result = 1;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        //用来存放最长子串&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        StringBuilder sb = new StringBuilder(len);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        sb.append(s.charAt(0));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        //遍历s，与最长子串比较&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        for(int i = 1; i&amp;lt;len ;i++)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            char obj = s.charAt(i);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            int sbLen = sb.length();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            int j = sbLen-1;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            //用obj 检查 最长子串中是否已存在 字符 obj，如果存在，那么此时的子串已经到头了，可以结束了&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            //我们要开始寻找下一个子串了，故需要把重复的字符obj和其之前的的字符都删除。&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            for(;j&amp;gt;=0;j--)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                if(obj == sb.charAt(j))&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    sb.delete(0,j+1);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    break;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            //刚遍历的字符obj 加入到sb中；&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            sb.append(obj);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            sbLen = sb.length();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            result = result &amp;lt; sbLen ? sbLen : result;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        return result;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;s2&quot;&gt;&lt;a href=&quot;#s2&quot; class=&quot;headerlink&quot; title=&quot;s2&quot;&gt;&lt;/a&gt;s2&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;//该版本参考了Discuss,还没看Discuss；耗时：ms；&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//待写&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Question-Longest-Substring-Without-Repeating-Characters&quot;&gt;&lt;a href=&quot;#Question-Longest-Substring-Without-Repeating-Characters&quot; class=&quot;h
    
    </summary>
    
      <category term="LeetCode" scheme="https://utihbi.github.io/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="https://utihbi.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>String to Integer(LeetCode)</title>
    <link href="https://utihbi.github.io/2016/08/22/String%20to%20Integer(LeetCode)/"/>
    <id>https://utihbi.github.io/2016/08/22/String to Integer(LeetCode)/</id>
    <published>2016-08-22T08:39:40.000Z</published>
    <updated>2016-08-22T08:46:25.571Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Question-String-to-Integer&quot;&gt;&lt;a href=&quot;#Question-String-to-Integer&quot; class=&quot;headerlink&quot; title=&quot;Question:String to Integer&quot;&gt;&lt;/a&gt;Question:&lt;a href=&quot;https://leetcode.com/problems/string-to-integer-atoi/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;String to Integer&lt;/a&gt;&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;Implement atoi to convert a string to an integer.

Hint: Carefully consider all possible input cases. If you want a challenge, please 

do not see below and ask yourself what are the possible input cases.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;It is intended for this problem to be specified vaguely (ie, no given input specs). You are responsible 

to gather all the input requirements up front.

Requirements for atoi:

The function first discards as many whitespace characters as necessary until the first non-whitespace 

character is found. Then, starting from this character, takes an optional initial plus or minus sign 

followed by as many numerical digits as possible, and interprets them as a numerical value.

The string can contain additional characters after those that form the integral number, which are 

ignored and have no effect on the behavior of this function.

If the first sequence of non-whitespace characters in str is not a valid integral number, or if no 

such sequence exists because either str is empty or it contains only whitespace characters, no 

conversion is performed.

If no valid conversion could be performed, a zero value is returned. If the correct value is out of

the range of representable values, INT_MAX (2147483647) or INT_MIN (-2147483648) is returned.
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;SourceCode&quot;&gt;&lt;a href=&quot;#SourceCode&quot; class=&quot;headerlink&quot; title=&quot;SourceCode:&quot;&gt;&lt;/a&gt;SourceCode:&lt;/h2&gt;&lt;h3 id=&quot;s1&quot;&gt;&lt;a href=&quot;#s1&quot; class=&quot;headerlink&quot; title=&quot;s1&quot;&gt;&lt;/a&gt;s1&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;50&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;51&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;52&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;53&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;54&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;55&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;56&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;57&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;58&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;59&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;//笔者提交版本；耗时：8ms；&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;public class Solution &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    public int myAtoi(String str) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        if(null == str || str.isEmpty() || &amp;quot;&amp;quot; == str||&amp;quot;+&amp;quot;.equals(str)||&amp;quot;-&amp;quot;.equals(str))&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            return 0;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        //&amp;quot;  -0012a42&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        String tmpStr = str.trim();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        int index = 0;//第一个不不符合数字格式的坐标，&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        int len = tmpStr.length();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        //遍历确定index&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        for(int i = 0 ; i&amp;lt;len ;i++)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            char ch = tmpStr.charAt(i);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            index = i+1;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            if(&amp;apos;-&amp;apos; == ch || &amp;apos;+&amp;apos; == ch)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                if(i == 0)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    continue;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;#125;else&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    index = i;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    break;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            if(ch &amp;lt;&amp;apos;0&amp;apos; || ch &amp;gt;&amp;apos;9&amp;apos;)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                 index = i;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                 break;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        //&amp;quot;      -11919730356x&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        index = index &amp;gt; 12 ? 12 :index;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        //数字位数超出Int 直接截断；截断是注意保留的剩余部分绝对值要大于int。int位数加符号“+（-）”一共11位，取12 防止最高位是1或者2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        String tmpResult = tmpStr.substring(0,index);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        long result = 0;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        try&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            //用long转满足 大于或小于int_max_value ,取最值；&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            result = Long.parseLong(tmpResult);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;catch(Exception e)&amp;#123;//捕获 &amp;quot;+&amp;quot; &amp;quot;-&amp;quot;的异常//eg:input : &amp;quot;+-2&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            result = 0;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;         //result = Long.parseLong(tmpResult);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        if(result &amp;gt; Integer.MAX_VALUE)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            return Integer.MAX_VALUE;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        if(result &amp;lt; Integer.MIN_VALUE)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            return Integer.MIN_VALUE;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        return (int)result;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;s2&quot;&gt;&lt;a href=&quot;#s2&quot; class=&quot;headerlink&quot; title=&quot;s2&quot;&gt;&lt;/a&gt;s2&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;//该版本参考了Discuss,还没看Discuss；耗时：ms；&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//待写&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Question-String-to-Integer&quot;&gt;&lt;a href=&quot;#Question-String-to-Integer&quot; class=&quot;headerlink&quot; title=&quot;Question:String to Integer&quot;&gt;&lt;/a&gt;Question
    
    </summary>
    
      <category term="LeetCode" scheme="https://utihbi.github.io/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="https://utihbi.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Reverse Integer(LeetCode)</title>
    <link href="https://utihbi.github.io/2016/08/22/Reverse%20Integer(LeetCode)/"/>
    <id>https://utihbi.github.io/2016/08/22/Reverse Integer(LeetCode)/</id>
    <published>2016-08-22T05:23:40.000Z</published>
    <updated>2016-08-22T05:27:29.187Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Question-Reverse-Integer&quot;&gt;&lt;a href=&quot;#Question-Reverse-Integer&quot; class=&quot;headerlink&quot; title=&quot;Question:Reverse Integer&quot;&gt;&lt;/a&gt;Question:&lt;a href=&quot;https://leetcode.com/problems/reverse-integer/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Reverse Integer&lt;/a&gt;&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;Reverse digits of an integer.

Example1: x = 123, return 321

Example2: x = -123, return -321
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;SourceCode&quot;&gt;&lt;a href=&quot;#SourceCode&quot; class=&quot;headerlink&quot; title=&quot;SourceCode:&quot;&gt;&lt;/a&gt;SourceCode:&lt;/h2&gt;&lt;h3 id=&quot;s1&quot;&gt;&lt;a href=&quot;#s1&quot; class=&quot;headerlink&quot; title=&quot;s1&quot;&gt;&lt;/a&gt;s1&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;//笔者提交版本；耗时：6ms；&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;public class Solution &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    public int reverse(int x) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        int tmpNum = Math.abs(x);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        StringBuilder tmpStr = new StringBuilder(String.valueOf(tmpNum));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        String result = (String)(x &amp;gt; 0 ? tmpStr.reverse().toString() : &amp;quot;-&amp;quot;+tmpStr.reverse().toString());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        int re =0;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		//边界控制&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        try &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        	re =Integer.parseInt(result);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;#125; catch (Exception e) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			// TODO: handle exception&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        return re;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;s2&quot;&gt;&lt;a href=&quot;#s2&quot; class=&quot;headerlink&quot; title=&quot;s2&quot;&gt;&lt;/a&gt;s2&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;//该版本参考了Discuss,还没看Discuss；耗时：ms；&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//待写&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Question-Reverse-Integer&quot;&gt;&lt;a href=&quot;#Question-Reverse-Integer&quot; class=&quot;headerlink&quot; title=&quot;Question:Reverse Integer&quot;&gt;&lt;/a&gt;Question:&lt;a hr
    
    </summary>
    
      <category term="LeetCode" scheme="https://utihbi.github.io/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="https://utihbi.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>ZigZag Conversion(LeetCode)</title>
    <link href="https://utihbi.github.io/2016/08/21/ZigZag%20Conversion(LeetCode)/"/>
    <id>https://utihbi.github.io/2016/08/21/ZigZag Conversion(LeetCode)/</id>
    <published>2016-08-21T14:22:06.000Z</published>
    <updated>2016-08-22T08:41:53.548Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Question-ZigZag-Conversion&quot;&gt;&lt;a href=&quot;#Question-ZigZag-Conversion&quot; class=&quot;headerlink&quot; title=&quot;Question:ZigZag Conversion&quot;&gt;&lt;/a&gt;Question:&lt;a href=&quot;https://leetcode.com/problems/zigzag-conversion/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ZigZag Conversion&lt;/a&gt;&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;The string &amp;quot;PAYPALISHIRING&amp;quot; is written in a zigzag pattern on a given number of 

rows like this: (you may want to display this pattern in a fixed font for better

legibility)

P   A   H   N
A P L S I I G
Y   I   R

And then read line by line: &amp;quot;PAHNAPLSIIGYIR&amp;quot;

Write the code that will take a string and make this conversion given a number of rows:

string convert(string text, int nRows);

convert(&amp;quot;PAYPALISHIRING&amp;quot;, 3) should return &amp;quot;PAHNAPLSIIGYIR&amp;quot;.
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;SourceCode&quot;&gt;&lt;a href=&quot;#SourceCode&quot; class=&quot;headerlink&quot; title=&quot;SourceCode:&quot;&gt;&lt;/a&gt;SourceCode:&lt;/h2&gt;&lt;h3 id=&quot;s1&quot;&gt;&lt;a href=&quot;#s1&quot; class=&quot;headerlink&quot; title=&quot;s1&quot;&gt;&lt;/a&gt;s1&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;//笔者提交版本；耗时：6ms；&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;public class Solution &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    public String convert(String s, int numRows) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        if(null == s)&amp;#123;return &amp;quot;&amp;quot;;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        int len = s.length();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        //边界控制要仔细啊，numRows &amp;lt;=1 &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        if(numRows &amp;gt;= len||numRows &amp;lt;=1)&amp;#123;return s;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        StringBuilder result = new StringBuilder(len);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        int step = numRows - 2 + numRows;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        int lastLineNum = numRows -1 ;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        for(int i= 0 ; i&amp;lt; numRows ;i++)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            //第一行和最后一行&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            if(i==0 || i == lastLineNum)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                int j = i;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                while(j&amp;lt;len)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    result.append(s.charAt(j));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    j += step;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            //中间行处理&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            else&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                int tmpStep = (lastLineNum-i)*2;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                //成对处理&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                int j = i;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                int k = j + tmpStep;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                while(j&amp;lt;len)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    result.append(s.charAt(j));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    j += step;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    if(k&amp;lt;len)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        result.append(s.charAt(k));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        k += step;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        return result.toString();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;s2&quot;&gt;&lt;a href=&quot;#s2&quot; class=&quot;headerlink&quot; title=&quot;s2&quot;&gt;&lt;/a&gt;s2&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;//该版本参考了Discuss,还没看Discuss；耗时：ms；&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//待写&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Question-ZigZag-Conversion&quot;&gt;&lt;a href=&quot;#Question-ZigZag-Conversion&quot; class=&quot;headerlink&quot; title=&quot;Question:ZigZag Conversion&quot;&gt;&lt;/a&gt;Question
    
    </summary>
    
      <category term="LeetCode" scheme="https://utihbi.github.io/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="https://utihbi.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Java获取Class类型引用的比较</title>
    <link href="https://utihbi.github.io/2016/08/06/Java%E8%8E%B7%E5%8F%96Class%E7%B1%BB%E5%9E%8B%E5%BC%95%E7%94%A8%E7%9A%84%E6%AF%94%E8%BE%83/"/>
    <id>https://utihbi.github.io/2016/08/06/Java获取Class类型引用的比较/</id>
    <published>2016-08-06T00:35:06.000Z</published>
    <updated>2016-08-06T01:25:08.144Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Class类型引用获取方式&quot;&gt;&lt;a href=&quot;#Class类型引用获取方式&quot; class=&quot;headerlink&quot; title=&quot;Class类型引用获取方式&quot;&gt;&lt;/a&gt;Class类型引用获取方式&lt;/h2&gt;&lt;p&gt; 无论何时，只要你想在运行时使用类型信息，就必须首先获得对恰当的Class对象的引用；&lt;/p&gt;
&lt;p&gt; Class.forName();&lt;/p&gt;
&lt;p&gt; 通过实例对象的getClass();&lt;/p&gt;
&lt;p&gt; 类字面常量：Initable.class；&lt;/p&gt;
&lt;h2 id=&quot;类字面常量说明&quot;&gt;&lt;a href=&quot;#类字面常量说明&quot; class=&quot;headerlink&quot; title=&quot;类字面常量说明&quot;&gt;&lt;/a&gt;类字面常量说明&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;类字面常量不会自动初始化该Class对象。为了使用类需要做的准备工作包括以下3个方面：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;- 加载 由类加载器执行

- 链接 验证字节码，为静态域分配空间，并且如果必须的话，将解析这个类创建的对其他类的所有引用

- 初始化 如果该类具有超类，则对其初始化，执行静态初始化器和静态初始化块。
&lt;/code&gt;&lt;/pre&gt;&lt;font color=&quot;red&quot;&gt;初始化被延迟到了对静态方法(构造器隐式地是静态的)或者非常数静态域进行首先引用时才执行&lt;/font&gt;

&lt;blockquote&gt;
&lt;p&gt;类字面常量初始化有效的实现了尽可能的“惰性”。详见代码：&lt;/p&gt;
&lt;p&gt;仅使用.class来获取类的引用时不会引发初始化；但Class.forName()却立即进行了初始化&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;50&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;51&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;52&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;53&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;54&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;55&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;56&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;57&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;58&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;59&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;60&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;61&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;62&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;63&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;64&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;65&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;66&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;67&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;68&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;69&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;70&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;71&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;72&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;73&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;74&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;75&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;import java.util.Random;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;class Initable&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    static final int staticFinal = 47;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    static final int staticFinal2 = ClassInitialization.rand.nextInt(1000);// the value is between 0 and 1000 which is returned ;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    static&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        System.out.println(&amp;quot;Initializing Initable&amp;quot;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;class Initable2&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    static int staticNonFinal = 147;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    static&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        System.out.println(&amp;quot;Initializing Initable2&amp;quot;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;class Initable3&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    static int staticNonFinal = 74;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    static&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        System.out.println(&amp;quot;Initializing Initable3&amp;quot;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;public class ClassInitialization&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    public static Random rand = new Random(47);// Random(long seed);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    public static void main (String[] args) throws Exception&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Class initable = Initable.class; //不会引发类初始化;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        splitLine(&amp;quot;Initable&amp;quot;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        System.out.println(Initable.staticFinal);//编译期常量，不需对Initable类进行初始化就可以读取&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        //splitLine();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        System.out.println(Initable.staticFinal2);//非编译期常量，强制对Initable类进行初始化&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        splitLine(null);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        System.out.println(Initable2.staticNonFinal);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        //访问一个非final的static域，在读取之前，要求先进行链接(为这个域分配存储空间)和初始化(初始化该存储空间)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        splitLine(&amp;quot;Initable2&amp;quot;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Class initable3 = Class.forName(&amp;quot;Initable3&amp;quot;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        splitLine(&amp;quot;Initable3&amp;quot;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        System.out.println(Initable3.staticNonFinal);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    public static void splitLine(String desc)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        if(null!= desc) System.out.println(&amp;quot;After creating &amp;quot;+desc+&amp;quot; ref&amp;quot;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        System.out.println(&amp;quot;------------------------------------&amp;quot;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	/*&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	*            output:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	*&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	* After creating Initable ref&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	* ------------------------------------&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	* 47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	* Initializing Initable&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	* 258&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	* ------------------------------------&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	* Initializing Initable2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	* 147&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	* After creating Initable2 ref&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	* ------------------------------------&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	* Initializing Initable3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	* After creating Initable3 ref&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	* ------------------------------------&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	* 74&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	*/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;参考资料：Thinking in Java&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Class类型引用获取方式&quot;&gt;&lt;a href=&quot;#Class类型引用获取方式&quot; class=&quot;headerlink&quot; title=&quot;Class类型引用获取方式&quot;&gt;&lt;/a&gt;Class类型引用获取方式&lt;/h2&gt;&lt;p&gt; 无论何时，只要你想在运行时使用类型信息，就必须首先
    
    </summary>
    
      <category term="JAVA" scheme="https://utihbi.github.io/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="https://utihbi.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>快速排序</title>
    <link href="https://utihbi.github.io/2016/08/04/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%20/"/>
    <id>https://utihbi.github.io/2016/08/04/快速排序 /</id>
    <published>2016-08-04T11:58:13.463Z</published>
    <updated>2016-08-04T14:08:45.754Z</updated>
    
    <content type="html">&lt;h3 id=&quot;快速排序&quot;&gt;&lt;a href=&quot;#快速排序&quot; class=&quot;headerlink&quot; title=&quot;快速排序&quot;&gt;&lt;/a&gt;快速排序&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;思想&lt;/strong&gt;：分治思想：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- 分解：数组A[p..r]被划分为两个(可能为空)子数组A[p..q-1]和A[q+1..r]，使得A[p..q-1]中的每一个元素都 &amp;lt;=A[q]，

        而A[q+1..r]中的每一个元素都都 &amp;gt;=A[q]。其中，计算下标q 也是划分过程的一部分。

- 解决：通过递归调用，对子数组A[p..q-1]和A[q+1..r]进行排序。

- 合并：子数组是原址排序的，所有不需要合并操作：数组A[p..r]已经有序。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;应用场景：适用于大量数据排序，是&lt;font color=&quot;red&quot;&gt;原址排序&lt;/font&gt;。譬如找一堆数据的第K大(小)元素。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;情景     时间复杂度    备注&lt;br&gt;  理想     O(nlgn)        &lt;font color=&quot;green&quot;&gt;划分平衡(划分是常数比例的)&lt;/font&gt;&lt;br&gt;  最坏     O(n^2)        划分非平衡&lt;/p&gt;
&lt;p&gt;不稳定排序&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;50&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;51&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//java code&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;quickSort&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] array,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; start,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; end)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	   &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(start &amp;lt; end)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;//r位置元素是最终元素的位置；&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; r = partition(array,start,end);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			quickSort(array,start,r-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			quickSort(array,r+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,end);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	   &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//实现对A[p..r]原址排序&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;partition&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] array,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; start,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; end)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	   &lt;span class=&quot;comment&quot;&gt;//选一个基准元素作为比较的元素，为方便，我们选最后一个元素；&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	   &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; x = array[end];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	   &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	   &lt;span class=&quot;comment&quot;&gt;/*&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	   * 将数组划分为3段：&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	   * start~i：元素 &amp;lt;= x;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	   * i~j: 元素 &amp;gt; x;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	   * j~end：待处理的元素&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	   */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	   &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = start - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	   &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = start; j &amp;lt; end; j++)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(array[j] &amp;lt;= x)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				swap(array,++i,j);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	   &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	   &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	   &lt;span class=&quot;comment&quot;&gt;//将基准元素放到自己的位置上；&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	   swap(array,++i,end);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	   &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	   &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; i;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;swap&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] array,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;//异或交换注意 i！= j;否则 自己异或 将使结果为 0&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(i == j)&amp;#123;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		array[i] ^= array[j];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		array[j] ^= array[i];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		array[i] ^= array[j];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] array  = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[]&amp;#123;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;45&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;99&lt;/span&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	  quickSort(array,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,array.length-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; ;i&amp;lt;array.length ;i++)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		  System.out.println(array[i]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;快速排序&quot;&gt;&lt;a href=&quot;#快速排序&quot; class=&quot;headerlink&quot; title=&quot;快速排序&quot;&gt;&lt;/a&gt;快速排序&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;思想&lt;/strong&gt;：分治思想：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- 分解：数组A[p..r]被划分为两个(
    
    </summary>
    
      <category term="算法" scheme="https://utihbi.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="排序" scheme="https://utihbi.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>IOException的正确处理方式</title>
    <link href="https://utihbi.github.io/2016/07/29/IOException%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F/"/>
    <id>https://utihbi.github.io/2016/07/29/IOException的正确处理方式/</id>
    <published>2016-07-29T02:35:06.000Z</published>
    <updated>2016-07-30T02:48:59.150Z</updated>
    
    <content type="html">&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;/*&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;IO&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	字节流：&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			InputStream,OutputStream&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	字符流：&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			Reader,Writer&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;IO所有操作都有IOException&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;import java.io.*;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;class FileWriterDemo&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	public static void main(String [] args)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		//定义在外面，否则finally 中的fw 找不到&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		FileWriter fw  = null;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		try&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			//创建文件,若文件已存在，会干掉&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			fw = new FileWriter(&amp;quot;FileWriterDemo.txt&amp;quot;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			//创建文件,若文件已存在，末尾追加内容&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			//fw = new FileWriter(&amp;quot;FileWriterDemo.txt&amp;quot;,true);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			fw.write(&amp;quot;aabc&amp;quot;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;#125;catch(IOException e)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			System.out.println(e.toString());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;#125;finally&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			try&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				if(null != fw)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;					fw.close();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;					/*&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;					关闭资源一定要执行，放在finally中(外层);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;					关闭操作有IOException：故 try&amp;#123;&amp;#125;catch&amp;#123;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;					创建文件就抛出异常，fw==null ；故需判断&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;					*/ &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&amp;#125;catch(IOException e)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				System.out.println(e.toString());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/di
    
    </summary>
    
      <category term="JAVA" scheme="https://utihbi.github.io/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="https://utihbi.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>word转PDF遇到的图片问题</title>
    <link href="https://utihbi.github.io/2016/07/28/word%E8%BD%ACPDF%E9%81%87%E5%88%B0%E7%9A%84%E5%9B%BE%E7%89%87%E9%97%AE%E9%A2%98/"/>
    <id>https://utihbi.github.io/2016/07/28/word转PDF遇到的图片问题/</id>
    <published>2016-07-28T13:09:06.000Z</published>
    <updated>2016-07-28T13:43:53.924Z</updated>
    
    <content type="html">&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;笔者用rose画了个活动图，粘贴到word中，直接保存为PDF，打开之后，我的活动图就

光芒万丈了。上图：

word：
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;http://oald9ve1g.bkt.clouddn.com/hexo/img/word.png&quot; alt=&quot;word图&quot;&gt;&lt;br&gt;    PDF:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://oald9ve1g.bkt.clouddn.com/hexo/img/pdf.png&quot; alt=&quot;PDF图&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;解决方法：&quot;&gt;&lt;a href=&quot;#解决方法：&quot; class=&quot;headerlink&quot; title=&quot;解决方法：&quot;&gt;&lt;/a&gt;解决方法：&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;1. 下载
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href=&quot;http://www.huacolor.com/article/29720.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;4款免费PDF&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;2. print
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href=&quot;http://www.cutepdf-editor.com/support/writer.asp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;cutepdf&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;笔者用rose画了个活动图，粘贴到word中，直接保存为PDF，打开之后，我的活动图就

光芒万丈了。上图：

word：

    
    </summary>
    
      <category term="7788" scheme="https://utihbi.github.io/categories/7788/"/>
    
    
      <category term="7788" scheme="https://utihbi.github.io/tags/7788/"/>
    
  </entry>
  
  <entry>
    <title>FourNums(LeetCode)</title>
    <link href="https://utihbi.github.io/2016/07/25/FourNums(LeetCode)%20/"/>
    <id>https://utihbi.github.io/2016/07/25/FourNums(LeetCode) /</id>
    <published>2016-07-25T09:05:06.000Z</published>
    <updated>2016-07-25T09:10:04.906Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Question-4Sum&quot;&gt;&lt;a href=&quot;#Question-4Sum&quot; class=&quot;headerlink&quot; title=&quot;Question:4Sum&quot;&gt;&lt;/a&gt;Question:&lt;a href=&quot;https://leetcode.com/problems/4sum/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;4Sum&lt;/a&gt;&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;Given an array S of n integers, are there elements a, b, c, and d in S such that 

a + b + c + d = target? 

Find all unique quadruplets in the array which gives the sum of target.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;The solution set must not contain duplicate quadruplets.

For example, given array S = [1, 0, -1, 0, -2, 2], and target = 0.

A solution set is:
[
  [-1,  0, 0, 1],
  [-2, -1, 1, 2],
  [-2,  0, 0, 2]
]
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;SourceCode&quot;&gt;&lt;a href=&quot;#SourceCode&quot; class=&quot;headerlink&quot; title=&quot;SourceCode:&quot;&gt;&lt;/a&gt;SourceCode:&lt;/h2&gt;&lt;h3 id=&quot;s1&quot;&gt;&lt;a href=&quot;#s1&quot; class=&quot;headerlink&quot; title=&quot;s1&quot;&gt;&lt;/a&gt;s1&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;50&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;51&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;52&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;53&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;54&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;55&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;56&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;57&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;58&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;59&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;60&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;61&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;62&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;63&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;64&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;65&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;66&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;67&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;68&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;69&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;70&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;71&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;72&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;73&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;74&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;75&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;76&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;77&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;78&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;79&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;80&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;81&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;82&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;83&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;84&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;85&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;86&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;87&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;88&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;89&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;90&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;91&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;92&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;93&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;94&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;95&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;96&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;97&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;98&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;99&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;100&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;101&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;102&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;103&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;104&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;105&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;106&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;107&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;108&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;109&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;110&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;111&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;112&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;113&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;114&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;115&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;116&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;117&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;118&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;119&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;120&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;121&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;122&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;123&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;124&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;125&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;126&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;127&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;128&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;129&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;130&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;131&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;132&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;//笔者提交版本；耗时：46ms；&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;public class Solution &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    public List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; fourSum(int[] nums, int target) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; result = new ArrayList&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt;();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           int len = nums.length;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           if(len &amp;lt; 4)&amp;#123; return result;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           Arrays.sort(nums);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           if(nums[len-1]*4&amp;lt; target)&amp;#123;return result;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; listTmp = null;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           for(int i = 0,iLoc = len-3 ; i&amp;lt; iLoc; i++)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;               //if(nums[i] &amp;gt; target &amp;amp;&amp;amp; target&amp;gt;=0)&amp;#123;break;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;               if(nums[i]*4 &amp;gt; target )&amp;#123;break;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;               &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;               int targetT = target - nums[i];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;               listTmp = threeSum(nums,i+1,len ,targetT );&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;               &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;               for(List&amp;lt;Integer&amp;gt; tHV:listTmp)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                   &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    List&amp;lt;Integer&amp;gt; tmp = new ArrayList&amp;lt;Integer&amp;gt;();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    tmp.add(nums[i]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    tmp.add(tHV.get(0));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    tmp.add(tHV.get(1));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    tmp.add(tHV.get(2));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    result.add(tmp);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;               &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;               //debug&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;               //if(i == 1)&amp;#123;System.out.println(result);&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;               &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;               while(i&amp;lt;iLoc-1 &amp;amp;&amp;amp; nums[i]==nums[i+1])&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                   //System.out.println(i);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                   i++;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;               &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           if(null!=listTmp)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;               listTmp.clear();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           return result;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    public List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; threeSum(int[] nums,int start,int len, int target )&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; list = new ArrayList&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt;();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; listTmp = null;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        if(nums[len-1]*3&amp;lt; target)&amp;#123;return list;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        for(int i = start,iLoc = len -2  ;i&amp;lt; iLoc;i++)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;               &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;               if(nums[i]*3 &amp;gt; target)&amp;#123;break;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;              // if(nums[i] &amp;gt; target &amp;amp;&amp;amp; target&amp;gt;=0)&amp;#123;break;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;               &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;               int targetT = target - nums[i];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;               listTmp = twoSum(nums,i+1,len ,targetT );&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;               &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;               for(List&amp;lt;Integer&amp;gt; tV:listTmp)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                   &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    List&amp;lt;Integer&amp;gt; tmp = new ArrayList&amp;lt;Integer&amp;gt;();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    tmp.add(nums[i]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    tmp.add(tV.get(0));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    tmp.add(tV.get(1));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    list.add(tmp);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;               &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;               &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                //debug1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;               //if(i == 3 )&amp;#123;System.out.println(list);&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;               &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;               while(i&amp;lt;iLoc-1 &amp;amp;&amp;amp; nums[i]==nums[i+1])&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                   i++;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                  // System.out.println(i);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;               &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           if(null!=listTmp)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;               listTmp.clear();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           return list;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    public List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; twoSum(int[] nums,int start,int len, int target )&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; list = new ArrayList&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt;();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Map&amp;lt;Integer,Integer&amp;gt; map = new HashMap&amp;lt;Integer,Integer&amp;gt;();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        if(target&amp;gt; nums[len-1]+nums[len-2])&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           return list;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        for(int i = start,iLoc = len ;i&amp;lt; iLoc;i++)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            /*int targetT = target - nums[i];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            if(nums[i] &amp;gt; targetT)&amp;#123;break;&amp;#125;*/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            //if(target &amp;lt; nums[i]*2)&amp;#123;break;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            //这个地方还有的疑惑，为啥不可以这样写？&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            boolean move = false;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            while(i&amp;lt;len-1 &amp;amp;&amp;amp; nums[i]==nums[i+1])&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                   i++;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                   move = true;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           // if(target ==-2)&amp;#123;System.out.println(target);&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            //System.out.println(target);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            //[0,0,0,0] &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            //0&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            //so add target!=nums[i]*2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            if(map.containsKey(nums[i]) || target == nums[i]*2 &amp;amp;&amp;amp; move)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                List&amp;lt;Integer&amp;gt; tmp = new ArrayList&amp;lt;Integer&amp;gt;();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                //进来却没有Key，是因为target == nums[i]*2，即还没来得及放进去&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                tmp.add(map.get(nums[i])==null ? nums[i]:map.get(nums[i]));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                tmp.add(nums[i]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                list.add(tmp);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;      &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            map.put(target - nums[i],nums[i]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        map.clear();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        return list;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;s2&quot;&gt;&lt;a href=&quot;#s2&quot; class=&quot;headerlink&quot; title=&quot;s2&quot;&gt;&lt;/a&gt;s2&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;//该版本参考了Discuss,还没看Discuss；耗时：ms；&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//待写&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Question-4Sum&quot;&gt;&lt;a href=&quot;#Question-4Sum&quot; class=&quot;headerlink&quot; title=&quot;Question:4Sum&quot;&gt;&lt;/a&gt;Question:&lt;a href=&quot;https://leetcode.com/problems
    
    </summary>
    
      <category term="LeetCode" scheme="https://utihbi.github.io/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="https://utihbi.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>ThreeNums(LeetCode)</title>
    <link href="https://utihbi.github.io/2016/07/25/ThreeNums(LeetCode)/"/>
    <id>https://utihbi.github.io/2016/07/25/ThreeNums(LeetCode)/</id>
    <published>2016-07-25T03:20:06.000Z</published>
    <updated>2016-07-25T03:49:05.199Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Question-3Sum&quot;&gt;&lt;a href=&quot;#Question-3Sum&quot; class=&quot;headerlink&quot; title=&quot;Question:3Sum&quot;&gt;&lt;/a&gt;Question:&lt;a href=&quot;https://leetcode.com/problems/3sum/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;3Sum&lt;/a&gt;&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? 

Find all unique triplets in the array which gives the sum of zero.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;The solution set must not contain duplicate triplets.

For example, given array S = [-1, 0, 1, 2, -1, -4],

A solution set is:
[
  [-1, 0, 1],
  [-1, -1, 2]
]
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;SourceCode&quot;&gt;&lt;a href=&quot;#SourceCode&quot; class=&quot;headerlink&quot; title=&quot;SourceCode:&quot;&gt;&lt;/a&gt;SourceCode:&lt;/h2&gt;&lt;h3 id=&quot;s1&quot;&gt;&lt;a href=&quot;#s1&quot; class=&quot;headerlink&quot; title=&quot;s1&quot;&gt;&lt;/a&gt;s1&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;//笔者提交版本；耗时：67ms；&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;public class Solution &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    public List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; threeSum(int[] nums) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; result = new ArrayList&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt;();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        int len = nums.length;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        if(len &amp;lt; 3)&amp;#123;return result;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Set&amp;lt;ArrayList&amp;lt;Integer&amp;gt;&amp;gt; resultSet = new HashSet&amp;lt;&amp;gt;();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Arrays.sort(nums);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        for(int i = 0;i&amp;lt;len-2;i++)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            for(int j = i+1;j&amp;lt;len-1;j++)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                int target = 0 - nums[i] - nums[j];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                if(target &amp;lt; 0)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    break;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                int k = Arrays.binarySearch(nums,j+1,len,target);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                if(0 &amp;lt;= k)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    ArrayList&amp;lt;Integer&amp;gt; tmpArray = new  ArrayList&amp;lt;Integer&amp;gt;();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    tmpArray.add(nums[i]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    tmpArray.add(nums[j]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    tmpArray.add(nums[k]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    resultSet.add(tmpArray);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        for(List&amp;lt;Integer&amp;gt; elem :resultSet)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            result.add(elem);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        return result;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;s2&quot;&gt;&lt;a href=&quot;#s2&quot; class=&quot;headerlink&quot; title=&quot;s2&quot;&gt;&lt;/a&gt;s2&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;50&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;51&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;52&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;53&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;54&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;55&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;56&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;57&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;58&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;59&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;60&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;61&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;62&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;63&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;64&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;65&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;//该版本参考了Discuss,重新整理优化；耗时：8ms；&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;public class Solution &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        public List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; threeSum(int[] nums) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        int len = nums.length;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt;  result = new ArrayList&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt;();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		if(len &amp;lt; 3)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			return result;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		//经过排序后，数据分为 负数区，0区，和正数区；&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		Arrays.sort(nums);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		for(int i = 0, jLoc = len -1 , iLoc = len - 2; i &amp;lt; iLoc ; i++)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			int target = 0 - nums[i];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			int jStart = i+1;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			int jEnd = jLoc;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			//进入正数区&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			if(target &amp;lt; 0 )&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				break;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			while(jStart &amp;lt; jEnd)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				int sum = 0;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				if(target == (sum = nums[jStart] + nums [jEnd]))&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;					addElemnts(result,nums[i],nums[jStart],nums[jEnd]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;					&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;					//去掉重复元素&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;					while(jStart &amp;lt; jEnd &amp;amp;&amp;amp; nums[jEnd-1] == nums[jEnd])&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;						jEnd--;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;					&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;					while(jStart &amp;lt; jEnd &amp;amp;&amp;amp; nums[jStart+1] == nums[jStart])&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;						jStart++;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;					&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;					&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;					jEnd--;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;					jStart++;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				&amp;#125;else if(target &amp;lt; sum )&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;					jEnd--; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				&amp;#125;else&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;					jStart++;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			//去掉重复元素&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			while((i &amp;lt; iLoc )&amp;amp;&amp;amp; nums[i+1] == nums[i])&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				i++;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        return result;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	public void addElemnts(List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt;  result,int a,int b,int c)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		List&amp;lt;Integer&amp;gt; tmpArr = new ArrayList&amp;lt;Integer&amp;gt;();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		tmpArr.add(a);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		tmpArr.add(b);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		tmpArr.add(c);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		result.add(tmpArr);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Question-3Sum&quot;&gt;&lt;a href=&quot;#Question-3Sum&quot; class=&quot;headerlink&quot; title=&quot;Question:3Sum&quot;&gt;&lt;/a&gt;Question:&lt;a href=&quot;https://leetcode.com/problems
    
    </summary>
    
      <category term="LeetCode" scheme="https://utihbi.github.io/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="https://utihbi.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>数据库基本概念</title>
    <link href="https://utihbi.github.io/2016/07/24/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
    <id>https://utihbi.github.io/2016/07/24/关系数据库基本概念/</id>
    <published>2016-07-24T02:23:06.000Z</published>
    <updated>2016-07-24T04:30:01.689Z</updated>
    
    <content type="html">&lt;h2 id=&quot;范式&quot;&gt;&lt;a href=&quot;#范式&quot; class=&quot;headerlink&quot; title=&quot;范式&quot;&gt;&lt;/a&gt;范式&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;符合某一种级别的关系模式的集合

构造数据库必须遵循一定的规则，在关系数据库中，这种规则就是范式

目前关系数据库有六种范式
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;第一范式（1NF）无重复的列&lt;/p&gt;
&lt;p&gt;  1NF是对&lt;font color=&quot;red&quot;&gt;属性原子性&lt;/font&gt;约束，要求属性具有原子性，不可再分解&lt;/p&gt;
&lt;p&gt;  简言之，不能有重复的属性，消除重复的属性&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;第二范式（2NF）属性完全依赖于主键&lt;/p&gt;
&lt;p&gt;  2NF是对记录的惟一性约束，要求记录有惟一标识(主键)，即&lt;font color=&quot;red&quot;&gt;实体惟一性&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;  &lt;font color=&quot;blue&quot;&gt;完全依赖&lt;/font&gt;：不能存在仅依赖主关键字一部分的属性(联合主键情况)，如果存在，那么这个属性和主关键字的这一部分应该分离出来形成一个新的实体，新实体与原实体之间是一对多的关系。&lt;/p&gt;
&lt;p&gt;  简言之，消除部分函数依赖&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;第三范式（3NF）属性不依赖于其它非主属性&lt;/p&gt;
&lt;p&gt;  3NF是对字段冗余性的约束，即任何字段不能由其他字段派生出来，它要求字段没有冗余,即&lt;font color=&quot;red&quot;&gt;字段冗余性&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;  简言之，一个数据库表中不包含已在其它表中已包含的非主关键字信息，消除传递依赖&lt;/p&gt;
&lt;p&gt;  Eg:人员ID、人员姓名、部门ID、部门名称。该表不因有“部门名称”的冗余信息，该字段通过部门ID即可找到。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;模式结构&quot;&gt;&lt;a href=&quot;#模式结构&quot; class=&quot;headerlink&quot; title=&quot;模式结构&quot;&gt;&lt;/a&gt;模式结构&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;外模式（用户级）&lt;/p&gt;
&lt;p&gt;  别名：子模式、用户模式&lt;/p&gt;
&lt;p&gt;  一个DB可以有&lt;font color=&quot;blue&quot;&gt;多个外模式&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;  由模式导出，给出了每个用户的局部描述（用户数据库）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;模式（概念级）&lt;/p&gt;
&lt;p&gt;  别名：逻辑模式&lt;/p&gt;
&lt;p&gt;  一个DB只有&lt;font color=&quot;blue&quot;&gt;1个模式&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;  给出了系统全局的数据描述&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;内模式（物理级）&lt;/p&gt;
&lt;p&gt;  别名：存储模式&lt;/p&gt;
&lt;p&gt;  一个DB只有&lt;font color=&quot;blue&quot;&gt;1个内模式&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;  给出了DB物理存储结构和物理存取方法&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;事务&quot;&gt;&lt;a href=&quot;#事务&quot; class=&quot;headerlink&quot; title=&quot;事务&quot;&gt;&lt;/a&gt;事务&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;由一系列数据库操作组成的一个完整的逻辑过程

Eg:银行转帐，从原账户扣除金额，以及向目标账户添加金额，这两个数据库操作的总和，构成一个完整的逻辑过程，不可拆分
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;ACID&quot;&gt;&lt;a href=&quot;#ACID&quot; class=&quot;headerlink&quot; title=&quot;ACID&quot;&gt;&lt;/a&gt;ACID&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;数据库事务正确执行的四个基本要素的缩写
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;原子性（Atomicity）&lt;/p&gt;
&lt;p&gt;  一个事务（transaction）中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;一致性（Consistency）&lt;/p&gt;
&lt;p&gt;  在事务开始之前和事务结束以后，数据库的完整性没有被破坏。这表示写入的资料必须完全符合所有的预设规则，这包含资料的精确度、串联性以及后续数据库可以自发性地完成预定的工作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;隔离性（Isolation）&lt;/p&gt;
&lt;p&gt;  数据库允许多个并发事务同时对其数据进行读写和修改，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;持久性（Durability）&lt;/p&gt;
&lt;p&gt;  事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;事务隔离级别&quot;&gt;&lt;a href=&quot;#事务隔离级别&quot; class=&quot;headerlink&quot; title=&quot;事务隔离级别&quot;&gt;&lt;/a&gt;事务隔离级别&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;用来限定事务内外的哪些改变是可见的，哪些是不可见的。低级别的隔离级一般支持更高的并发处理，并拥有更低的系统开销。

隔离的简单定义：一个事务只能看见已经提交事务所做的改变。

解决问题：脏读、不可重复读、幻读
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;读未提交（Read uncommitted）&lt;/p&gt;
&lt;p&gt;  所有事务都可以看到其他未提交事务的执行结果。&lt;/p&gt;
&lt;p&gt;  本隔离级别很少用于实际应用，因为它的性能也不比其他级别好多少。读取未提交的数据，也被称之为&lt;font color=&quot;red&quot;&gt;脏读（Dirty Read）&lt;/font&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;读提交（read committed）&lt;/p&gt;
&lt;p&gt;  &lt;font color=&quot;red&quot;&gt;大多数数据库系统的默认隔离级别&lt;/font&gt;，满足了隔离的简单定义&lt;/p&gt;
&lt;p&gt;  支持&lt;font color=&quot;blue&quot; size=&quot;4&quot;&gt;不可重复读（Nonrepeatable Read）&lt;/font&gt;，因为&lt;font color=&quot;blue&quot; size=&quot;4&quot;&gt;同一事务的其他实例在该实例&lt;/font&gt;处理其间可能会有新的commit，所以同一select可能返回不同结果。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;font color=&quot;blue&quot; size=&quot;4&quot;&gt;可重复读（repeatable read）&lt;/font&gt;

&lt;p&gt;  &lt;font color=&quot;red&quot;&gt;MySQL的默认事务隔离级别&lt;/font&gt;，它确保&lt;font color=&quot;blue&quot; size=&quot;4&quot;&gt;同一事务的多个实例&lt;/font&gt;在并发读取数据时，会看到同样的数据行。&lt;/p&gt;
&lt;p&gt;  理论上，会导致&lt;font color=&quot;blue&quot; size=&quot;4&quot;&gt;&lt;strong&gt;幻读（Phantom Read）&lt;/strong&gt;&lt;/font&gt;：当用户读取某一范围的数据行时，&lt;font color=&quot;blue&quot; size=&quot;4&quot;&gt;另一个事务&lt;/font&gt;又在该范围内插入了新行，当用户再读取该范围的数据行时，会发现有新的“幻影” 行。InnoDB和Falcon存储引擎通过多版本并发控制（MVCC，Multiversion Concurrency Control）机制解决了该问题&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;串行化（Serializable）&lt;/p&gt;
&lt;p&gt;  最高的隔离级别，它通过强制事务排序，使之不可能相互冲突，从而解决幻读问题。&lt;/p&gt;
&lt;p&gt;  简言之，它是在每个读的数据行上加上共享锁。在这个级别，可能导致大量的超时现象和锁竞争。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;不可重复读和幻读比较&quot;&gt;&lt;a href=&quot;#不可重复读和幻读比较&quot; class=&quot;headerlink&quot; title=&quot;不可重复读和幻读比较&quot;&gt;&lt;/a&gt;不可重复读和幻读比较&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;不可重复读：在一个事务中不同时间段查询出现不同的结果，可能被更新可能被删除。

幻读:在一个事务中不同时间段查询，记录数不同。
    与不可重复读的区别是：在幻读中，已经读取的数据不会改变，只是与以前相比，会有更多的数据满足查询条件。
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;范式&quot;&gt;&lt;a href=&quot;#范式&quot; class=&quot;headerlink&quot; title=&quot;范式&quot;&gt;&lt;/a&gt;范式&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;符合某一种级别的关系模式的集合

构造数据库必须遵循一定的规则，在关系数据库中，这种规则就是范式

目前关系数据库有六种范式
    
    </summary>
    
      <category term="DB" scheme="https://utihbi.github.io/categories/DB/"/>
    
    
      <category term="DB" scheme="https://utihbi.github.io/tags/DB/"/>
    
  </entry>
  
  <entry>
    <title>细说UML核心模型</title>
    <link href="https://utihbi.github.io/2016/07/23/%E7%BB%86%E8%AF%B4UML%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9E%8B/"/>
    <id>https://utihbi.github.io/2016/07/23/细说UML核心模型/</id>
    <published>2016-07-23T09:51:06.000Z</published>
    <updated>2016-08-11T13:16:57.714Z</updated>
    
    <content type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;模型就是一堆有意义的静态图和动态图组合在一起，表达了一个有意义的中心思想。&lt;/p&gt;
&lt;p&gt;简言之，一个模型提出了论点，静态图是论据，动态图是论证。建模就是采用论据来论证论点的过程。&lt;/p&gt;
&lt;h2 id=&quot;用例模型&quot;&gt;&lt;a href=&quot;#用例模型&quot; class=&quot;headerlink&quot; title=&quot;用例模型&quot;&gt;&lt;/a&gt;用例模型&lt;/h2&gt;&lt;h3 id=&quot;业务用例模型&quot;&gt;&lt;a href=&quot;#业务用例模型&quot; class=&quot;headerlink&quot; title=&quot;业务用例模型&quot;&gt;&lt;/a&gt;业务用例模型&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;用于识别和规定业务需求，描述的是业务范围
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;什么时候使用业务用例模型？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;软件规模较大&lt;/li&gt;
&lt;li&gt;问题领域有复杂的组织结构&lt;/li&gt;
&lt;li&gt;业务流程繁杂&lt;/li&gt;
&lt;li&gt;开发人员对于这个行业知之甚少&lt;/li&gt;
&lt;li&gt;希望做行业标准&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;概念用例模型&quot;&gt;&lt;a href=&quot;#概念用例模型&quot; class=&quot;headerlink&quot; title=&quot;概念用例模型&quot;&gt;&lt;/a&gt;概念用例模型&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;用来分析和确认业务需求，抽象出的概念用例通过包含、泛化、扩展关系连接到基本业务用例
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;什么时候使用概念用例模型？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;业务用例粒度较大，不易过渡到粒度较小的系统用例&lt;/li&gt;
&lt;li&gt;业务场景过于复杂，步骤和分支过多&lt;/li&gt;
&lt;li&gt;有7+个泳道存在&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;系统-用例模型&quot;&gt;&lt;a href=&quot;#系统-用例模型&quot; class=&quot;headerlink&quot; title=&quot;[系统]用例模型&quot;&gt;&lt;/a&gt;[系统]用例模型&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;用来规定系统开发需求，描述的是系统范围(需求范围)

在RUP中，系统的功能性需求完全由用例模型来表达。简言之，用例模型就是“需求规格说明书”

在用例模型中用例使用精化关系来连接到业务用例(如果没有业务建模就不需要)
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;主要内容&quot;&gt;&lt;a href=&quot;#主要内容&quot; class=&quot;headerlink&quot; title=&quot;主要内容&quot;&gt;&lt;/a&gt;主要内容&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;用例视图&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;包括参与者与用例，是系统功能性需求的高层视图
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;用例规约&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;描述参与者如何启动和终止用例，如何使用用例完成目标，执行的事件流，相应的规则等
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;补充规约&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;描述与用例相关的非功能性需求。Eg:响应时间、可靠性、可用性等。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;业务规则&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;描述客户执行业务必须遵守的各种规定，亦或是操作规范、约束机制等。采用计算机语言表达，如伪代码编写，IF(条件)THEN(执行)。

业务规则应当被引用到用例规约中。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;用例实现&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;用例的一种实现方式，通常代表不同的应用环境。如之前提到的缴费用例。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;用例场景&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;描述参与者如何与计算机之间交互一达成其目的，可采用交互图来描述。
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;获取用例&quot;&gt;&lt;a href=&quot;#获取用例&quot; class=&quot;headerlink&quot; title=&quot;获取用例&quot;&gt;&lt;/a&gt;获取用例&lt;/h4&gt;&lt;p&gt;基本方法：&lt;/p&gt;
&lt;p&gt;分析业务用例场景，尤其是活动图。因为活动图中包含泳道，方便观察业务主角和业务工人的职责(活动)。一开始，可以简单&lt;br&gt;地把每个泳道中的活动都作为一个用例，已泳道为参与者，把它们绘制出来。然后考虑下面问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;排除用例&lt;/p&gt;
&lt;p&gt;  如果参与者不使用计算机来使用这个用例，或者计算机条件不允许，则与客户沟通后，排除。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;合并用例&lt;/p&gt;
&lt;p&gt;  用例可能有不同名字，但它们结果相同或相似，可以合并。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;抽象用例 &lt;/p&gt;
&lt;p&gt;  分析参与者使用它们的方式，使用方式可从用例场景中归纳。如果有这样情况，就抽象用例：结果虽然不同，但使用过程相同，则应当抽象出一个描述行为的用例。&lt;/p&gt;
&lt;p&gt;  Eg:查询报表A和查询报表B是两个不同的目的，有不同结果，但查询条件的过程一致，则抽象一个设置查询条件的用例，查询A和查询B都包含这个用例。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;补充用例&lt;/p&gt;
&lt;p&gt;  想系统加入那些与业务无关，但对系统运行必须的非业务需求。Eg:管理用户账号、备份系统数据等。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;领域模型&quot;&gt;&lt;a href=&quot;#领域模型&quot; class=&quot;headerlink&quot; title=&quot;领域模型&quot;&gt;&lt;/a&gt;领域模型&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;采用业务对象建立起来的一种模型。

是从所有业务用例场景对象交互模型当中抽象出来的更高级别的业务对象模型；它表示了业务对象结构和交互的一般规律，揭示了业务
运行的“本质”和“核心”。

可以帮助我们理解问题领域中的关键概念和关键对象。Eg:网上交易中，安全是一个重要课题，那么我们可以专门为安全解决方案建立
领域模型。
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;分析模型&quot;&gt;&lt;a href=&quot;#分析模型&quot; class=&quot;headerlink&quot; title=&quot;分析模型&quot;&gt;&lt;/a&gt;分析模型&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;使用分析类来建立系统原型，MVC模式的经典应用

在系统用例模型建立之后，设计模型建立之前，建立分析模型。

分析模型是设计模型的抽象或泛化关系。
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;软件架构和框架模型&quot;&gt;&lt;a href=&quot;#软件架构和框架模型&quot; class=&quot;headerlink&quot; title=&quot;软件架构和框架模型&quot;&gt;&lt;/a&gt;软件架构和框架模型&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;RUP是以架构为中心的开发模式。
&lt;/code&gt;&lt;/pre&gt;&lt;font color=&quot;red&quot;&gt;&lt;br&gt;框架和架构：&lt;br&gt;    框架：解决方案，是加速和提高系统质量的半成品。&lt;br&gt;    架构：系统蓝图，是对系统高层次的定义和描述。&lt;br&gt;&lt;/font&gt;

&lt;h3 id=&quot;软件架构&quot;&gt;&lt;a href=&quot;#软件架构&quot; class=&quot;headerlink&quot; title=&quot;软件架构&quot;&gt;&lt;/a&gt;软件架构&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;业务架构&lt;/p&gt;
&lt;p&gt;  业务领域的理解&lt;/p&gt;
&lt;p&gt;  在先启(RUP四个阶段：先启、精化、构建、产品化)阶段建立，精化阶段改进。&lt;/p&gt;
&lt;p&gt;  目标：为业务领域建立一个维护和扩展的逻辑结构，描述业务的构成。&lt;/p&gt;
&lt;p&gt;  来源：业务用例和领域模型&lt;/p&gt;
&lt;p&gt;  使用领域包和组织结构包来表示业务主要领域和组织结构关系。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;软件架构&lt;/p&gt;
&lt;p&gt;  系统领域的理解&lt;/p&gt;
&lt;p&gt;  视角&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;*   广度视角

    常见的软件层次结构，关注软件的分层，规定每一层的职责以及层之间的通信标准。

    一般使用层包来绘制。

*   深度视角

    广度视角中每一层的详细说明，关注每一层以及每个部分的具体实现架构。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  在业务架构的基础上引入计算机环境，说明业务架构如何分布在计算机环境中，并得以执行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;*   硬件环境：网络拓扑结构、服务器及其他设备

*   软件环境：操作系统、应用服务器、中间件、DB及其他第三方支持软件。
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;软件框架&quot;&gt;&lt;a href=&quot;#软件框架&quot; class=&quot;headerlink&quot; title=&quot;软件框架&quot;&gt;&lt;/a&gt;软件框架&lt;/h3&gt;&lt;p&gt;略&lt;/p&gt;
&lt;h3 id=&quot;何时使用？&quot;&gt;&lt;a href=&quot;#何时使用？&quot; class=&quot;headerlink&quot; title=&quot;何时使用？&quot;&gt;&lt;/a&gt;何时使用？&lt;/h3&gt;&lt;p&gt;架构可选，框架必须&lt;/p&gt;
&lt;h2 id=&quot;设计模型&quot;&gt;&lt;a href=&quot;#设计模型&quot; class=&quot;headerlink&quot; title=&quot;设计模型&quot;&gt;&lt;/a&gt;设计模型&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;我们通常说的详细设计。

采用设计类来实现用例的
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;从分析模型映射到设计模型&quot;&gt;&lt;a href=&quot;#从分析模型映射到设计模型&quot; class=&quot;headerlink&quot; title=&quot;从分析模型映射到设计模型&quot;&gt;&lt;/a&gt;从分析模型映射到设计模型&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;* 分析类代表设计元素的实例所承担的角色；

* 这些角色可由1+个设计模型元素来实现；

* 单个设计元素也可以实现多个角色。
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;方法&quot;&gt;&lt;a href=&quot;#方法&quot; class=&quot;headerlink&quot; title=&quot;方法&quot;&gt;&lt;/a&gt;方法&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;一个分析类对应一个设计类&lt;/li&gt;
&lt;li&gt;一个分析类对应一个设立类的一部分&lt;/li&gt;
&lt;li&gt;一个分析类设计成为设计模型的一个聚合类关系&lt;/li&gt;
&lt;li&gt;一个分析类设计成为设计模型中从同一个类继承而来的一组类&lt;/li&gt;
&lt;li&gt;一个分析类设计成为设计模型的中一组功能相关的类&lt;/li&gt;
&lt;li&gt;一个分析类对应一个设计模型的包&lt;/li&gt;
&lt;li&gt;一个分析类对应一个设计模型的关系&lt;/li&gt;
&lt;li&gt;分析类间的关系可以成为一个设计类&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;组件模型&quot;&gt;&lt;a href=&quot;#组件模型&quot; class=&quot;headerlink&quot; title=&quot;组件模型&quot;&gt;&lt;/a&gt;组件模型&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;组件总是用来容纳分析类和设计类的 。

简言之，组件是一种特殊的“包”，普通包起到组织和容纳作用，而组件的组织行为却有着特别的目标：这些分析类或设计类被组织起来
完成一组特定的功能。

组件与架构密不可分：

        架构是组件的设计规范，是组件的安装平台，是组件的运行环境，组件的管理环境。       
        Eg：J2EE架构和EJB组件、.NET架构和COM组件、SOA架构和SCA组件。
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;何时使用？-1&quot;&gt;&lt;a href=&quot;#何时使用？-1&quot; class=&quot;headerlink&quot; title=&quot;何时使用？&quot;&gt;&lt;/a&gt;何时使用？&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;分布式系统要考虑使用组件&lt;/li&gt;
&lt;li&gt;需要第三方提供支持服务&lt;/li&gt;
&lt;li&gt;没有采用架构开发&lt;/li&gt;
&lt;li&gt;与现存的第三方系统集成&lt;/li&gt;
&lt;li&gt;项目将某部分业务功能单独抽去出来，形成一个可复用的单元&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;广义组件&quot;&gt;&lt;a href=&quot;#广义组件&quot; class=&quot;headerlink&quot; title=&quot;广义组件&quot;&gt;&lt;/a&gt;广义组件&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;抛弃组件的特性（完备、独立、逻辑、透明），就是对物理代码进行组织的一个“包”

子系统、模块、类库、可执行程序等都是广义组件
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;实施模型&quot;&gt;&lt;a href=&quot;#实施模型&quot; class=&quot;headerlink&quot; title=&quot;实施模型&quot;&gt;&lt;/a&gt;实施模型&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;由配置节点(用节点元素绘制)和组件构成

用来描述系统硬件的物理拓扑结构

通常在分布式系统中使用

一个节点表示一个计算单元，通常是硬件,Eg:一台主机

组件代表可执行的物理代码模块，Eg:一个可执行程序
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;何时使用？-2&quot;&gt;&lt;a href=&quot;#何时使用？-2&quot; class=&quot;headerlink&quot; title=&quot;何时使用？&quot;&gt;&lt;/a&gt;何时使用？&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;分布式系统&lt;/li&gt;
&lt;li&gt;需要多方模块参与&lt;/li&gt;
&lt;li&gt;多个硬件设备&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考资料：《Thinking in UML》(大象书)&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;模型就是一堆有意义的静态图和动态图组合在一起，表达了一个有意义的中心思想。&lt;/p&gt;
&lt;p&gt;简言之，一个模型提出了论点，静态图是论据，动态图是
    
    </summary>
    
      <category term="UML" scheme="https://utihbi.github.io/categories/UML/"/>
    
    
      <category term="UML" scheme="https://utihbi.github.io/tags/UML/"/>
    
  </entry>
  
  <entry>
    <title>工厂模式</title>
    <link href="https://utihbi.github.io/2016/07/23/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>https://utihbi.github.io/2016/07/23/工厂模式/</id>
    <published>2016-07-23T06:28:06.000Z</published>
    <updated>2016-07-23T07:01:34.790Z</updated>
    
    <content type="html">&lt;h2 id=&quot;基本知识&quot;&gt;&lt;a href=&quot;#基本知识&quot; class=&quot;headerlink&quot; title=&quot;基本知识&quot;&gt;&lt;/a&gt;基本知识&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;开闭原则（Open Close Principle）:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对扩展开放，对修改关闭。&lt;/p&gt;
&lt;p&gt;在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。&lt;/p&gt;
&lt;p&gt;简言之，是为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类，后面的具体设计中我们会提到这点。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;创建型模式：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用&lt;font color=&quot;red&quot;&gt;new&lt;/font&gt;的运算符直接实例化对象&lt;/p&gt;
&lt;p&gt;目的：主要是用来创建对象，减少我们在使用某个对象时的&lt;font color=&quot;red&quot;&gt;new()&lt;/font&gt; 操作&lt;/p&gt;
&lt;h2 id=&quot;工厂模式&quot;&gt;&lt;a href=&quot;#工厂模式&quot; class=&quot;headerlink&quot; title=&quot;工厂模式&quot;&gt;&lt;/a&gt;工厂模式&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;为客户调用程序与具体的对象类型之间提供了一个解耦作用

简言之，应用程序不关心这个对象是怎么出来的，只关系如何使用这个对象，而且以后就算对象发生变化，那么也不需要修改用户应用

程序的代码。

提高了程序的可维护性和低耦合性。
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;简单工厂模式（创建型模式）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;定义了一种工厂，该工厂负责所有的子类对象的创建，如果说我们的工厂要求能够满足增加新的对象时，我们必须修改工厂代码

应用场景：适合对象类型不多，并且不会经常新增的情况下。

涉及角色：
    1、具体工厂类角色：有一定的商业逻辑和判断逻辑。    

    2、抽象产品角色：它一般是具体产品继承的父类或者实现的接口。

    3、具体产品角色：工厂类所创建的对象就是此角色的实例。
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;工厂方法模式（创建型模式）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;每个类型的对象都有与这个类型对应的工厂去创建，那么就算以后增加或者修改，只需要修改相应的工厂涉及的文件即可

应用场景：适合对象类型较多，并且会经常新增的情况下。

涉及角色：
    1、抽象工厂类角色：具体工厂角色必须实现的接口或者必须继承的父类。    

    2、具体工厂类角色

    3、抽象产品角色

    4、具体产品角色
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;font color=&quot;red&quot;&gt;&lt;br&gt;简单工厂模式，不符合开闭原则，因为所有的对象的创建工作都放在一个工厂类的内部去完成，逻辑太复杂。&lt;br&gt;&lt;br&gt;工厂方法模式，将每个工厂的职责进行了更细化，每个工厂只负责具体对象类型实例的创建。&lt;br&gt;&lt;/font&gt;

&lt;ul&gt;
&lt;li&gt;抽象工厂模式（创建型模式）&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;应用场景：支持动态的新增对象类型和新增工厂类型，实现多种依赖关系的对象或者组合关系的创建（产品族）

        简言之，具有相互依赖或者组合关系的对象类型实例的创建工作中使用。Eg:下面代码中绘制带颜色的图形。

涉及角色：
    1、抽象工厂类角色  

    2、具体工厂类角色

    3、抽象产品角色

    4、具体产品角色
&lt;/code&gt;&lt;/pre&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;50&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;51&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;52&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;53&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;54&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;55&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;56&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;57&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;58&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;59&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;60&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;61&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;62&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;63&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;64&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;65&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;66&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;67&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;68&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;69&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;70&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;71&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;72&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;73&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;74&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;75&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;76&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;77&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;78&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;79&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;80&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;81&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;82&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;83&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;84&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;85&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;86&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;87&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;88&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;89&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;90&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;91&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;92&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;93&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;94&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;95&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;96&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;97&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;98&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;99&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;100&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;101&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;102&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;103&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;104&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;105&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;106&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;107&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;108&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;109&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;110&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;111&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;112&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;113&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;114&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;115&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;116&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;117&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;118&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;119&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;120&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;121&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;122&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;123&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;124&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;125&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;126&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;127&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;128&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;129&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;130&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;131&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;132&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;133&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;134&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;135&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;136&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;137&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;138&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;139&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;140&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;141&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;142&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;143&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;144&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;145&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;146&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;147&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;148&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;149&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;150&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;151&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;152&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;153&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;154&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;155&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;156&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;157&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;158&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;159&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/****简单工厂****/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//1、创建产品接口&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Shape&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//2、创建具体产品并实现产品接口&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Rectangle&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Shape&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;Rectangle implements Shape&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Square&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Shape&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;Square implements Shape&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Circle&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Shape&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;Circle implements Shape&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//3、创建工厂，通过工厂创建产品&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ShapeFactory&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Shape &lt;span class=&quot;title&quot;&gt;getShape&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String shapeName)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; == shapeName)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Rectangle&quot;&lt;/span&gt;.equals(shapeName))&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Rectangle();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Square&quot;&lt;/span&gt;.equals(shapeName))&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Square();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Circle();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/****工厂方法****/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//3、创建工厂接口&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ShapeFactoryI&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Shape &lt;span class=&quot;title&quot;&gt;getShapeFactoryDetail&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//4、创建具体工厂并实现工厂接口&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;RectangleFactory&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ShapeFactoryI&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Shape &lt;span class=&quot;title&quot;&gt;getShapeFactoryDetail&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Rectangle();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SquareFactory&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ShapeFactoryI&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Shape &lt;span class=&quot;title&quot;&gt;getShapeFactoryDetail&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Square();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CircleFactory&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ShapeFactoryI&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Shape &lt;span class=&quot;title&quot;&gt;getShapeFactoryDetail&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Circle();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/****抽象工厂****/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*   1、 定义两个产品接口&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*   2、 定义具体产品  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*   3、 定义抽象工厂&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*   4、 定义具体工厂&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*   1、创建产品1接口（上面的Shape接口）&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*      创建产品2接口（这里的Color接口）&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Color&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//public Color getColor();&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//well, in practice ,you should define like the above;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getColor&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*   2、创建具体产品并实现产品1接口（上面的Shape接口）&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*      创建具体产品并实现产品2接口（这里的Color接口）&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Red&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Color&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getColor&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;Red	implements Color&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Green&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Color&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getColor&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;Green	implements Color&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Black&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Color&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getColor&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;Black 	implements Color&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*   3、定义抽象工厂&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AbstractFactory&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Color &lt;span class=&quot;title&quot;&gt;getColorDetail&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Shape &lt;span class=&quot;title&quot;&gt;getShapeDetail&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*   4、定义具体工厂&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;GreenSquareFactory&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AbstractFactory&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;  Color &lt;span class=&quot;title&quot;&gt;getColorDetail&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Green();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Shape &lt;span class=&quot;title&quot;&gt;getShapeDetail&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Square();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/********************测试程序******************/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MainTest&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	 &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;simple factory TEST&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		Rectangle rectangle = (Rectangle)ShapeFactory.getShape(&lt;span class=&quot;string&quot;&gt;&quot;Rectangle&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		rectangle.draw();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		 &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;\nfactory pattern TEST&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		ShapeFactoryI shapeFactory = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; CircleFactory();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		Circle circle = (Circle)shapeFactory.getShapeFactoryDetail();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		circle.draw();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		 &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;\nabstract factory TEST&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		AbstractFactory abstractFactory = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; GreenSquareFactory();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		abstractFactory.getColorDetail().getColor();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		abstractFactory.getShapeDetail().draw();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;基本知识&quot;&gt;&lt;a href=&quot;#基本知识&quot; class=&quot;headerlink&quot; title=&quot;基本知识&quot;&gt;&lt;/a&gt;基本知识&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;开闭原则（Open Close Principle）:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对扩展开放，对修改关
    
    </summary>
    
      <category term="设计模式" scheme="https://utihbi.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://utihbi.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>String类为什么是final的</title>
    <link href="https://utihbi.github.io/2016/07/22/String%E7%B1%BB%E4%B8%BA%E4%BB%80%E4%B9%88%E6%98%AFfinal%E7%9A%84/"/>
    <id>https://utihbi.github.io/2016/07/22/String类为什么是final的/</id>
    <published>2016-07-22T09:28:06.000Z</published>
    <updated>2016-08-11T13:24:31.664Z</updated>
    
    <content type="html">&lt;h2 id=&quot;final-优点&quot;&gt;&lt;a href=&quot;#final-优点&quot; class=&quot;headerlink&quot; title=&quot;final 优点&quot;&gt;&lt;/a&gt;final 优点&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;安全性： 在网络、DB连接中，参数类型是String,还有用户名密码等。如果String 可变，那这些参数值&lt;/p&gt;
&lt;p&gt;  很容易别人改掉；网络连接，DB连接中很容易被攻击。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;同步和并发问题：线程安全因此没有同步问题；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;缓存：当编译优化时，如果两个实例值一样，那就可以new一个对象，让两个引用都指向同一个实例。JVM底层就这样设&lt;/p&gt;
&lt;p&gt;  计的。换言之，Stirng可以改变，那一个引用改变了值，那其他指向这个实例的引用的值也改变了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;类加载：String被用作类加载的参数，如果可以改变，那将加载错误的类或加载不到类。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hask Key：不可变实例非常适合做hash表的key。否则，hash表的值会出现丢失情况。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;长度：长度是确定的，不会改变的。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;final-缺点&quot;&gt;&lt;a href=&quot;#final-缺点&quot; class=&quot;headerlink&quot; title=&quot;final 缺点&quot;&gt;&lt;/a&gt;final 缺点&lt;/h2&gt;&lt;p&gt;考虑这样一个问题：为什么在JAVA的密码管理中，更倾向去使用char[]而不是String？&lt;/p&gt;
&lt;p&gt;更具体一些的问法是：为什么在JAVA Swing中的密码输入框方法是：getPassword(return char[]), 而不是getText(return String)?&lt;/p&gt;
&lt;p&gt;毫无意外的，这里是一个安全问题。因为String 是不可变的，这意味着你一旦创建了它则无法修改。同样也意味着在GC前你&lt;/p&gt;
&lt;p&gt;无法彻底的删除掉它。在某些情况下，如果有人黑进了你的内存，那么被保存成String的密码则可以被人获取的。&lt;/p&gt;
&lt;p&gt;这就是为什么 你需要使用字符数组。你可以在使用完后显式的清除它，或者你也可以用其他的别的东西去覆盖它。这样敏感&lt;/p&gt;
&lt;p&gt;的信息就不会在系统的其他地方出现，即使此时GC还没有启动。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;final-优点&quot;&gt;&lt;a href=&quot;#final-优点&quot; class=&quot;headerlink&quot; title=&quot;final 优点&quot;&gt;&lt;/a&gt;final 优点&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;安全性： 在网络、DB连接中，参数类型是String,还有用户名密码等。如
    
    </summary>
    
      <category term="JAVA" scheme="https://utihbi.github.io/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="https://utihbi.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>细说UML核心视图</title>
    <link href="https://utihbi.github.io/2016/07/22/%E7%BB%86%E8%AF%B4UML%E6%A0%B8%E5%BF%83%E8%A7%86%E5%9B%BE/"/>
    <id>https://utihbi.github.io/2016/07/22/细说UML核心视图/</id>
    <published>2016-07-22T06:52:06.000Z</published>
    <updated>2016-08-11T13:17:08.557Z</updated>
    
    <content type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;描述软件和现实一样，都需要描述&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;系统的结构性特征(系统能做什么)———–静态视图&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;系统运行时特征(系统怎么做)——–动态视图&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;UML视图分类&quot;&gt;&lt;a href=&quot;#UML视图分类&quot; class=&quot;headerlink&quot; title=&quot;UML视图分类&quot;&gt;&lt;/a&gt;UML视图分类&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;静态视图：&lt;pre&gt;&lt;code&gt;用例图、类图、包图等
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;动态视图：&lt;pre&gt;&lt;code&gt;活动图、状态图、时序图、协作图等
&lt;/code&gt;&lt;/pre&gt;&lt;font color=&quot;red&quot;&gt;&lt;br&gt;  注：动态视图不能独立存在，必须特指一个静态视图或UML元素，说明静态视图规定的事物结构下它们的动态行为。&lt;br&gt;&lt;/font&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;静态视图&quot;&gt;&lt;a href=&quot;#静态视图&quot; class=&quot;headerlink&quot; title=&quot;静态视图&quot;&gt;&lt;/a&gt;静态视图&lt;/h1&gt;&lt;h2 id=&quot;用例图&quot;&gt;&lt;a href=&quot;#用例图&quot; class=&quot;headerlink&quot; title=&quot;用例图&quot;&gt;&lt;/a&gt;用例图&lt;/h2&gt;&lt;h3 id=&quot;业务用例视图&quot;&gt;&lt;a href=&quot;#业务用例视图&quot; class=&quot;headerlink&quot; title=&quot;业务用例视图&quot;&gt;&lt;/a&gt;业务用例视图&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;展现了业务系统的功能性需求，如果要描述这些需求的实现路径，需要借助下面的业务用例实现视图
&lt;/code&gt;&lt;/pre&gt;&lt;center&gt;&lt;img src=&quot;http://oald9ve1g.bkt.clouddn.com/hexo/img/bu_use.png&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

&lt;h3 id=&quot;业务用例实现视图&quot;&gt;&lt;a href=&quot;#业务用例实现视图&quot; class=&quot;headerlink&quot; title=&quot;业务用例实现视图&quot;&gt;&lt;/a&gt;业务用例实现视图&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;展现业务用例有哪些实现途径
&lt;/code&gt;&lt;/pre&gt;&lt;center&gt;&lt;img src=&quot;http://oald9ve1g.bkt.clouddn.com/hexo/img/bu_use_re.png&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

&lt;h3 id=&quot;概念用例视图&quot;&gt;&lt;a href=&quot;#概念用例视图&quot; class=&quot;headerlink&quot; title=&quot;概念用例视图&quot;&gt;&lt;/a&gt;概念用例视图&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;从业务用例中经过分析分解出来的关键概念用例，并表示概念用例和业务用例直接的关系；

一般来说，这些关系包括 扩展、包含、精化。

以业务用例为单元展现，即视图名称命名为业务用例名称
&lt;/code&gt;&lt;/pre&gt;&lt;center&gt;&lt;img src=&quot;http://oald9ve1g.bkt.clouddn.com/hexo/img/cn_use.png&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

&lt;h3 id=&quot;系统用例图&quot;&gt;&lt;a href=&quot;#系统用例图&quot; class=&quot;headerlink&quot; title=&quot;系统用例图&quot;&gt;&lt;/a&gt;系统用例图&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;展现系统范围，对业务用例进行分析后得到到系统用例展现出来；

以业务用例为单元展现；
&lt;/code&gt;&lt;/pre&gt;&lt;center&gt;&lt;img src=&quot;http://oald9ve1g.bkt.clouddn.com/hexo/img/sys_use.png&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

&lt;h3 id=&quot;系统用例实现视图&quot;&gt;&lt;a href=&quot;#系统用例实现视图&quot; class=&quot;headerlink&quot; title=&quot;系统用例实现视图&quot;&gt;&lt;/a&gt;系统用例实现视图&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;展现系统用例有哪些实现途径
&lt;/code&gt;&lt;/pre&gt;&lt;center&gt;&lt;img src=&quot;http://oald9ve1g.bkt.clouddn.com/hexo/img/sys_use_re.png&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

&lt;h2 id=&quot;类图&quot;&gt;&lt;a href=&quot;#类图&quot; class=&quot;headerlink&quot; title=&quot;类图&quot;&gt;&lt;/a&gt;类图&lt;/h2&gt;&lt;h3 id=&quot;概念层类图-业务建模阶段&quot;&gt;&lt;a href=&quot;#概念层类图-业务建模阶段&quot; class=&quot;headerlink&quot; title=&quot;概念层类图(业务建模阶段)&quot;&gt;&lt;/a&gt;概念层类图(业务建模阶段)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;独立于实现语言和实现方式；&lt;/li&gt;
&lt;li&gt;&lt;p&gt;描述现实世界中问题领域的概念理解；&lt;/p&gt;
&lt;p&gt; 简言之，表达的类与现实世界问题领域有明显的对应关系；但与最终实现的类不一定有直接和明显的对应的关系&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;说明层类图-概念建模阶段&quot;&gt;&lt;a href=&quot;#说明层类图-概念建模阶段&quot; class=&quot;headerlink&quot; title=&quot;说明层类图(概念建模阶段)&quot;&gt;&lt;/a&gt;说明层类图(概念建模阶段)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;考察类的接口不是实现&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;表达的类和类关系是对问题领域在接口层次的抽象描述；&lt;/p&gt;
&lt;p&gt;  简言之，不关心编程语言，设计模式等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;现实世界和最终实现之间的桥梁。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;实现层类图-设计建模阶段&quot;&gt;&lt;a href=&quot;#实现层类图-设计建模阶段&quot; class=&quot;headerlink&quot; title=&quot;实现层类图(设计建模阶段)&quot;&gt;&lt;/a&gt;实现层类图(设计建模阶段)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;类是实现代码的描述；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;要明确：编程语言、设计模式、通信标准等；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;包图&quot;&gt;&lt;a href=&quot;#包图&quot; class=&quot;headerlink&quot; title=&quot;包图&quot;&gt;&lt;/a&gt;包图&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;略
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;动态视图&quot;&gt;&lt;a href=&quot;#动态视图&quot; class=&quot;headerlink&quot; title=&quot;动态视图&quot;&gt;&lt;/a&gt;动态视图&lt;/h1&gt;&lt;h2 id=&quot;活动图&quot;&gt;&lt;a href=&quot;#活动图&quot; class=&quot;headerlink&quot; title=&quot;活动图&quot;&gt;&lt;/a&gt;活动图&lt;/h2&gt;&lt;p&gt;描述了为了完成某一个目标需要做的活动以及这些活动的执行顺序。【面向过程的视图】&lt;/p&gt;
&lt;p&gt;实际建模过程中，活动图主要用来&lt;em&gt;业务场景建模&lt;/em&gt;和&lt;em&gt;用例场景建模&lt;/em&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;描述用例场景&lt;/li&gt;
&lt;li&gt;描述对象交互&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;用例活动图&quot;&gt;&lt;a href=&quot;#用例活动图&quot; class=&quot;headerlink&quot; title=&quot;用例活动图&quot;&gt;&lt;/a&gt;用例活动图&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;用例表达了参与者的一个目标，用例场景则描述了如何达到这个目标。

用例活动图用来描述用例场景，即通常说的业务流程。

业务流程通过多个活动按照一定的条件和顺序来推进。每个活动完成一个工作单元。
&lt;/code&gt;&lt;/pre&gt;&lt;center&gt;&lt;img src=&quot;http://oald9ve1g.bkt.clouddn.com/hexo/img/activity.png&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

&lt;h3 id=&quot;对象活动图&quot;&gt;&lt;a href=&quot;#对象活动图&quot; class=&quot;headerlink&quot; title=&quot;对象活动图&quot;&gt;&lt;/a&gt;对象活动图&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;用于展示对象交互。

可理解为对实现层类图实例化后对象交互的情况。
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;状态图&quot;&gt;&lt;a href=&quot;#状态图&quot; class=&quot;headerlink&quot; title=&quot;状态图&quot;&gt;&lt;/a&gt;状态图&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;显示一个状态机。状态机用于对模型元素的动态行为建模；

换言之，对系统行为中受事件驱动的方面进行建模。

通常用来说明业务角色或业务实体可能的状态————导致状态转换的事件和状态转换引起的操作。

对于类的对象的所有状态，状态图都显示它可能接受的信息、将执行的操作和在此之后对象所处的状态。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;center&gt;&lt;img src=&quot;http://oald9ve1g.bkt.clouddn.com/hexo/img/status.png&quot; alt=&quot;&quot;&gt;&lt;/center&gt;&lt;/p&gt;
&lt;font color=&quot;red&quot;&gt;&lt;br&gt;    状态图只用于描述单个对象的行为；&lt;br&gt;&lt;br&gt;    对象间的交互采用时序图和协作图；&lt;br&gt;&lt;/font&gt;


&lt;h2 id=&quot;时序图&quot;&gt;&lt;a href=&quot;#时序图&quot; class=&quot;headerlink&quot; title=&quot;时序图&quot;&gt;&lt;/a&gt;时序图&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;描述按时间顺序排列的对象间的交互模式；

按照参与交互的对象所具有的“生命线”和它们相互交互发送的消息来显示这些对象。

实际中：
        我们用时序图来描述用例实现

使用时序图来描述用例实现是一种从现实世界到对象世界的一种映射方法。
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;业务模型时序图(业务建模阶段)&lt;/p&gt;
&lt;p&gt;  对业务实体对象绘制(为业务实体交互建模，实现业务用例)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;概念模型时序图(概念建模阶段)&lt;/p&gt;
&lt;p&gt;  对分析类对象绘制(已带有计算机的理解)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;设计模型时序图(设计建模阶段)    &lt;/p&gt;
&lt;p&gt;  对设计类对象绘制（消息细致到方法级别）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;协作图&quot;&gt;&lt;a href=&quot;#协作图&quot; class=&quot;headerlink&quot; title=&quot;协作图&quot;&gt;&lt;/a&gt;协作图&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;描述了对象间交互的一种模式；

通过对象间的连接和它们相互发送的消息来显示参与交互的对象。

可以为用例事件流的每一个变化形式制作一个协作图。
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;业务模型时序图(业务建模阶段)&lt;/p&gt;
&lt;p&gt;  对业务实体对象绘制(为业务实体交互建模，实现业务用例)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;概念模型时序图(概念建模阶段)&lt;/p&gt;
&lt;p&gt;  对分析类对象绘制(已带有计算机的理解)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;设计模型时序图(设计建模阶段)    &lt;/p&gt;
&lt;p&gt;  对设计类对象绘制（消息细致到方法级别）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;font color=&quot;red&quot;&gt;&lt;br&gt;注：&lt;br&gt;    1.  时序图和协作图式可以相互转化的；&lt;font color=&quot;green&quot;&gt;（rose中 F5 即可相互转化）&lt;/font&gt;&lt;br&gt;&lt;br&gt;    2.  时序图强调消息事件发生的顺序，方便阐述事件流的过程，或方便调用过程的理解；&lt;br&gt;&lt;br&gt;    3.  协作图来展现了对象间的关系，方便获得对对象结构的理解。&lt;br&gt;&lt;/font&gt;


&lt;p&gt;参考资料：《Thinking in UML》(大象书)&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;描述软件和现实一样，都需要描述&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;系统的结构性特征(系统能做什么)———–静态视图&lt;/p&gt;
&lt;/li&gt;
&lt;li
    
    </summary>
    
      <category term="UML" scheme="https://utihbi.github.io/categories/UML/"/>
    
    
      <category term="UML" scheme="https://utihbi.github.io/tags/UML/"/>
    
  </entry>
  
</feed>
